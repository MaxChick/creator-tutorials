{
  "Collect": {
    "name": "collect",
    "alternateNames": [
      "merge",
      "group",
      "collate",
      "test"
    ],
    "defaultNodeName": "collect",
    "path": [
      "geometry"
    ],
    "help": "Collects geometry from all inputs into a single output.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry",
        "multigeo": true
      }
    },
    "type": "Collect",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "Null": {
    "name": "null",
    "alternateNames": [
      "layout",
      "routing"
    ],
    "defaultNodeName": "",
    "path": [
      "geometry"
    ],
    "help": "Does nothing.  Use for graph layout.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      }
    },
    "type": "Null",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "Switch": {
    "name": "switch",
    "alternateNames": [
      "choose",
      "pick"
    ],
    "defaultNodeName": "switch",
    "path": [
      "geometry"
    ],
    "help": "Switches between geometry inputs using an index value.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry",
        "multigeo": true
      },
      "index": {
        "type": "integer",
        "default": 0,
        "minimum": 0,
        "description": "which incoming geometry input to pass on",
        "displayName": "index"
      }
    },
    "type": "Switch",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "CurveBoolean": {
    "name": "boolean 2d paths",
    "alternateNames": [
      "curve",
      "polygon",
      "path",
      "2d boolean"
    ],
    "defaultNodeName": "boolean 2d paths",
    "path": [
      "geometry",
      "2d path"
    ],
    "help": "Performs 2d boolean operations on curves.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry",
        "multigeo": true
      },
      "workplane": {
        "type": "enum",
        "default": 2,
        "options": [
          "X = 0",
          "Y = 0",
          "Z = 0"
        ],
        "displayName": "work plane"
      },
      "preFlatten": {
        "type": "boolean",
        "default": true,
        "displayName": "pre-flatten",
        "description": "flattens the input curves into the chosen workplane before triangulating"
      },
      "clipType": {
        "type": "enum",
        "options": [
          "intersect",
          "union",
          "difference",
          "xor"
        ],
        "displayName": "boolean type"
      },
      "fillType": {
        "type": "enum",
        "options": [
          "even-odd",
          "nonzero",
          "positive",
          "negative"
        ],
        "displayName": "fill type",
        "description": "google 'clipper fill type'"
      },
      "swap": {
        "type": "enum",
        "options": [
          "last",
          "first"
        ],
        "displayName": "primary polygon",
        "description": "input curve/polygon to use as the primary"
      },
      "swapSubject": {
        "type": "enum",
        "options": [
          "clip",
          "subject"
        ],
        "displayName": "primary role",
        "description": "the role of the primary polygon"
      },
      "closeCurves": {
        "type": "boolean",
        "default": true,
        "displayName": "close resulting curves"
      }
    },
    "type": "CurveBoolean",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "OffsetCurve": {
    "name": "offset 2d path",
    "alternateNames": [
      "offset curve",
      "offset polygon"
    ],
    "defaultNodeName": "offset 2d path",
    "path": [
      "geometry",
      "2d path"
    ],
    "help": "Offsets curves in the selected 2d plane.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "workplane": {
        "type": "enum",
        "default": 2,
        "options": [
          "X = 0",
          "Y = 0",
          "Z = 0"
        ],
        "displayName": "work plane"
      },
      "preFlatten": {
        "type": "boolean",
        "default": true,
        "displayName": "pre-flatten",
        "description": "flattens the input curves into the chosen workplane before triangulating"
      },
      "offset": {
        "type": "float",
        "displayName": "offset"
      },
      "joinType": {
        "type": "enum",
        "options": [
          "miter",
          "square",
          "round",
          "none (simple)"
        ],
        "displayName": "join",
        "description": "'none' preserves number of points"
      },
      "miterLimit": {
        "type": "float",
        "displayName": "miter limit",
        "hideWhen": "joinType > 0"
      },
      "arcPrecision": {
        "type": "float",
        "displayName": "arc precision",
        "hideWhen": "joinType < 2 || joinType == 3"
      },
      "closeCurves": {
        "type": "boolean",
        "default": true,
        "displayName": "close resulting curves"
      }
    },
    "type": "OffsetCurve",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "TriangulateCurve": {
    "name": "triangulate 2d path",
    "alternateNames": [
      "create polygon",
      "tesselate",
      "tessellate",
      "path",
      "curve",
      "mesh",
      "path to polygon"
    ],
    "defaultNodeName": "triangulate 2d path",
    "path": [
      "geometry",
      "2d path"
    ],
    "help": "Converts 2d curves/paths to a mesh.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "workplane": {
        "type": "enum",
        "default": 2,
        "options": [
          "X = 0",
          "Y = 0",
          "Z = 0"
        ],
        "displayName": "work plane"
      },
      "preFlatten": {
        "type": "boolean",
        "default": true,
        "displayName": "pre-flatten",
        "description": "flattens the input curves into the chosen workplane before triangulating"
      },
      "library": {
        "type": "enum",
        "options": [
          "Poly2Tri",
          "Triangle"
        ],
        "description": "Poly2Tri is faster and more stable; Triangle is experimental, but offers triangle refinement and smoothing",
        "displayName": "library"
      },
      "mode": {
        "type": "enum",
        "options": [
          "first curve is outline, other curves are holes",
          "all curves are outlines"
        ],
        "displayName": "input handling"
      },
      "convexHull": {
        "type": "boolean",
        "displayName": "make convex hull",
        "description": "make convex hull of incoming points"
      },
      "algorithm": {
        "type": "enum",
        "options": [
          "sweepline",
          "Dwyer",
          "incremental"
        ],
        "description": "triangulation algorithm - sweepline is most stable (in particular for smoothing)",
        "displayName": "algorithm",
        "hideWhen": "library == 0"
      },
      "refine": {
        "type": "boolean",
        "default": false,
        "description": "refine the mesh based on a max triangle area and min angle",
        "displayName": "refine",
        "hideWhen": "library == 0"
      },
      "maxArea": {
        "type": "float",
        "default": 10000,
        "description": "max triangle area",
        "displayName": "max area",
        "hideWhen": "!refine || library == 0"
      },
      "minAngle": {
        "type": "float",
        "minimum": 1,
        "maximum": 34.8,
        "default": 20,
        "description": "min angles of triangles",
        "displayName": "min angle",
        "hideWhen": "!refine || library == 0"
      },
      "maxAngle": {
        "type": "float",
        "minimum": 100,
        "maximum": 180,
        "default": 180,
        "description": "max angles of triangles",
        "displayName": "max angle",
        "hideWhen": "!refine || library == 0"
      },
      "smoothing": {
        "type": "integer",
        "default": 0,
        "minimum": 0,
        "maximum": 100,
        "description": "smooth triangle layout after triangulation (works best using sweepline algorithm)",
        "displayName": "smoothing",
        "hideWhen": "!refine || library == 0"
      },
      "internalPoints": {
        "type": "list:vector",
        "description": "extra internal points - force vertex creation at those points",
        "displayName": "inner points"
      }
    },
    "type": "TriangulateCurve",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "AddAttribute": {
    "name": "add attribute",
    "alternateNames": [
      "set attribute",
      "write attribute"
    ],
    "defaultNodeName": "add attribute",
    "path": [
      "geometry",
      "attribute | metadata"
    ],
    "help": "Adds attribute metadata to points, primitives or nodes.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "mode": {
        "type": "enum",
        "options": [
          "per point",
          "per primitive",
          "on node",
          "on graph"
        ],
        "displayName": "type"
      },
      "attributeName": {
        "type": "string",
        "displayName": "attribute name"
      },
      "value": {
        "type": "flexi:anything",
        "description": "accepts a single value or list (boolean, int, float, string)",
        "displayName": "value"
      }
    },
    "type": "AddAttribute",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "GetAttribute": {
    "name": "get attribute",
    "alternateNames": [
      "attribute to list",
      "read attribute"
    ],
    "defaultNodeName": "get attribute",
    "path": [
      "geometry",
      "attribute | metadata"
    ],
    "help": "Extracts metadata by input type and tag.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "mode": {
        "type": "enum",
        "options": [
          "per point",
          "per primitive",
          "on node",
          "on graph"
        ],
        "displayName": "mode"
      },
      "attributeType": {
        "type": "enum",
        "options": [
          "boolean, integer or float",
          "vector",
          "string"
        ],
        "displayName": "type"
      },
      "attributeName": {
        "type": "string",
        "displayName": "attribute name",
        "description": "attribute name to get"
      },
      "defaultValue": {
        "type": "float",
        "default": -1,
        "description": "value to add to list if attribute does not exist on geo",
        "displayName": "default",
        "hideWhen": "attributeType > 0"
      },
      "defaultVectorValue": {
        "type": "vector",
        "description": "value to add to a vector list if attribute does not exist on geo",
        "displayName": "default",
        "hideWhen": "attributeType == 0 || attributeType == 2"
      },
      "defaultStringValue": {
        "type": "string",
        "description": "value to add to a string list if attribute does not exist on geo",
        "displayName": "default",
        "hideWhen": "attributeType < 2"
      }
    },
    "type": "GetAttribute",
    "output": {
      "number": {
        "type": "float",
        "description": "number attribute from node",
        "displayName": "number"
      },
      "vector": {
        "type": "vector",
        "description": "vector attribute from node",
        "displayName": "vector"
      },
      "string": {
        "type": "string",
        "description": "string attribute from node",
        "displayName": "string"
      },
      "number list": {
        "type": "list:float",
        "displayName": "number list",
        "description": "list of attribute values"
      },
      "vector list": {
        "type": "list:vector",
        "description": "list of vector attribute values",
        "displayName": "vector list"
      },
      "string list": {
        "type": "list:string",
        "description": "list of string attribute values",
        "displayName": "string list"
      }
    },
    "nodeClass": "attribute"
  },
  "Copy": {
    "name": "copy",
    "alternateNames": [
      "duplicate",
      "loop"
    ],
    "defaultNodeName": "copy",
    "path": [
      "geometry",
      "copy | loop"
    ],
    "help": "Duplicates and transforms geometry.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "numCopies": {
        "type": "integer",
        "default": 1,
        "displayName": "# of copies",
        "description": "number of copies or iterations"
      },
      "translate": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "translate"
      },
      "rotate": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "rotate"
      },
      "scale": {
        "type": "flexi:vector",
        "default": [
          1,
          1,
          1
        ],
        "displayName": "scale"
      },
      "uniformScale": {
        "type": "flexi:float",
        "default": 1,
        "displayName": "uniform scale"
      },
      "setIterators": {
        "type": "boolean",
        "default": false,
        "displayName": "use iterator(s)"
      },
      "iteratorTag": {
        "type": "string",
        "default": "",
        "displayName": "iterator tag"
      },
      "combineMeshes": {
        "type": "boolean",
        "default": false,
        "displayName": "combine meshes",
        "description": "combine all meshes into one (displays faster)"
      }
    },
    "type": "Copy",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "Copy2": {
    "name": "copy using vectors",
    "alternateNames": [
      "duplicate",
      "loop",
      "instance",
      "matrix",
      "matrice"
    ],
    "defaultNodeName": "copy using vectors",
    "path": [
      "geometry",
      "copy | loop"
    ],
    "help": "Copies primitives based on lists of input transform vectors.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "positions": {
        "type": "flexi:vector",
        "description": "positions",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "positions"
      },
      "normals": {
        "type": "flexi:vector",
        "description": "normals",
        "default": [
          0,
          0,
          1
        ],
        "displayName": "normals"
      },
      "upVectors": {
        "type": "flexi:vector",
        "displayName": "up vectors",
        "default": [
          0,
          1,
          0
        ]
      },
      "setIterators": {
        "type": "boolean",
        "default": false,
        "displayName": "use iterator(s)"
      },
      "iteratorTag": {
        "type": "string",
        "default": "",
        "displayName": "iterator tag"
      },
      "combineMeshes": {
        "type": "boolean",
        "default": false,
        "displayName": "combine meshes",
        "description": "combine all meshes into one (displays faster)"
      },
      "mode": {
        "type": "integer",
        "default": 4,
        "description": "Variations on up vector orientation, direction of rotation, and handedness/chirality",
        "displayName": "mode"
      }
    },
    "type": "Copy2",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "Iterator": {
    "name": "iterator",
    "alternateNames": [],
    "defaultNodeName": "iterator",
    "path": [
      "geometry",
      "copy | loop"
    ],
    "help": "Used in conjunction with downstream loop and copy nodes with the same tag.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "value": {
        "type": "integer",
        "description": "set or connect a value to be used when not looping (value will not be respected during loop)",
        "default": 0,
        "displayName": "idling value"
      },
      "tag": {
        "type": "string",
        "description": "changes will not be respected during looping",
        "displayName": "tag"
      }
    },
    "type": "Iterator",
    "output": {
      "value": {
        "type": "integer",
        "description": "iterator value",
        "displayName": "value"
      },
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "communication"
  },
  "Loop": {
    "name": "loop",
    "alternateNames": [
      "iterate",
      "loop"
    ],
    "defaultNodeName": "loop",
    "path": [
      "geometry",
      "copy | loop"
    ],
    "help": "Repeats a section of the graph, accumulating geometry changes if so desired.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "numLoops": {
        "type": "integer",
        "default": 1,
        "displayName": "# of loops",
        "description": "number of iterations"
      },
      "iteratorTag": {
        "type": "string",
        "default": "",
        "displayName": "iterator tag"
      },
      "cumulative": {
        "type": "boolean",
        "default": false,
        "description": "feed result of a loop into the next loop, accumulating changes",
        "displayName": "cumulative"
      },
      "combineMeshes": {
        "type": "boolean",
        "default": false,
        "displayName": "combine meshes",
        "description": "combine all meshes into one (displays faster)",
        "hideWhen": "cumulative"
      }
    },
    "type": "Loop",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "Circle": {
    "name": "circle",
    "alternateNames": [
      "arc"
    ],
    "defaultNodeName": "circle",
    "path": [
      "geometry",
      "create"
    ],
    "help": "Creates a circle of selected type.",
    "input": {
      "mode": {
        "type": "enum",
        "default": 1,
        "options": [
          "NURBS curve",
          "polyline",
          "mesh"
        ],
        "displayName": "type"
      },
      "center": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "center"
      },
      "axis": {
        "type": "enum",
        "default": 2,
        "options": [
          "XZ",
          "YZ",
          "XY"
        ],
        "displayName": "orientation"
      },
      "radius": {
        "type": "flexi:float",
        "default": 500,
        "minimum": 0,
        "maximum": 5000,
        "displayName": "radius"
      },
      "segments": {
        "type": "flexi:integer",
        "default": 24,
        "minimum": 3,
        "maximum": 100,
        "displayName": "segments",
        "hideWhen": "mode == 0"
      },
      "startAngle": {
        "type": "flexi:float",
        "default": 0,
        "minimum": 0,
        "maximum": 360,
        "displayName": "start angle",
        "hideWhen": "mode == 0"
      },
      "endAngle": {
        "type": "flexi:float",
        "default": 360,
        "minimum": 0,
        "maximum": 360,
        "displayName": "end angle",
        "hideWhen": "mode == 0"
      }
    },
    "type": "Circle",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "primitive"
  },
  "PointGrid": {
    "name": "point grid",
    "alternateNames": [],
    "defaultNodeName": "point grid",
    "path": [
      "geometry",
      "create"
    ],
    "help": "Creates a point grid.",
    "input": {
      "origin": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "origin"
      },
      "resolutionX": {
        "type": "flexi:integer",
        "default": 11,
        "minimum": 0,
        "maximum": 333,
        "displayName": "resolutionX"
      },
      "resolutionY": {
        "type": "flexi:integer",
        "default": 11,
        "minimum": 0,
        "maximum": 333,
        "displayName": "resolutionY"
      },
      "resolutionZ": {
        "type": "flexi:integer",
        "default": 1,
        "minimum": 0,
        "maximum": 333,
        "displayName": "resolutionZ"
      },
      "spacing": {
        "type": "flexi:vector",
        "default": [
          100,
          100,
          100
        ],
        "displayName": "spacing"
      }
    },
    "type": "PointGrid",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "Line": {
    "name": "line",
    "alternateNames": [],
    "defaultNodeName": "line",
    "path": [
      "geometry",
      "create"
    ],
    "help": "Creates lines of selected type.",
    "input": {
      "mode": {
        "type": "enum",
        "options": [
          "centered",
          "origin + direction",
          "point to point"
        ],
        "displayName": "mode"
      },
      "center": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "center",
        "hideWhen": "mode>0"
      },
      "origin": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "start point",
        "hideWhen": "mode==0"
      },
      "direction": {
        "type": "flexi:vector",
        "default": [
          1,
          0,
          0
        ],
        "displayName": "direction",
        "hideWhen": "mode==2"
      },
      "end": {
        "type": "flexi:vector",
        "default": [
          1000,
          0,
          0
        ],
        "displayName": "end point",
        "hideWhen": "mode==0 || mode==1"
      },
      "length": {
        "type": "flexi:float",
        "default": 1000,
        "displayName": "length",
        "hideWhen": "mode==2"
      },
      "numPoints": {
        "type": "flexi:integer",
        "default": 2,
        "displayName": "number of points"
      },
      "order": {
        "type": "flexi:integer",
        "default": 2,
        "minimum": 2,
        "maximum": 10,
        "displayName": "order"
      }
    },
    "type": "Line",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "primitive"
  },
  "Plane": {
    "name": "rectangle",
    "alternateNames": [
      "patch",
      "grid",
      "square",
      "plane"
    ],
    "defaultNodeName": "rectangle",
    "path": [
      "geometry",
      "create"
    ],
    "help": "Creates a rectangular plane of selected type along the selected axis.",
    "input": {
      "mode": {
        "type": "enum",
        "default": 3,
        "options": [
          "NURBS surface",
          "points",
          "mesh",
          "polyline"
        ],
        "displayName": "type"
      },
      "axis": {
        "type": "enum",
        "default": 2,
        "options": [
          "XZ",
          "YZ",
          "XY"
        ],
        "displayName": "orientation"
      },
      "center": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "center"
      },
      "length": {
        "type": "flexi:float",
        "default": 1000,
        "minimum": 0,
        "maximum": 10000,
        "displayName": "length"
      },
      "width": {
        "type": "flexi:float",
        "default": 1000,
        "minimum": 0,
        "maximum": 10000,
        "displayName": "width"
      },
      "orderU": {
        "type": "flexi:integer",
        "default": 2,
        "minimum": 2,
        "maximum": 10,
        "displayName": "orderU",
        "hideWhen": "mode > 0"
      },
      "orderV": {
        "type": "flexi:integer",
        "default": 2,
        "minimum": 2,
        "maximum": 10,
        "displayName": "orderV",
        "hideWhen": "mode > 0"
      },
      "columns": {
        "type": "flexi:integer",
        "default": 2,
        "minimum": 2,
        "maximum": 256,
        "displayName": "point columns"
      },
      "rows": {
        "type": "flexi:integer",
        "default": 2,
        "minimum": 2,
        "maximum": 256,
        "displayName": "point rows"
      }
    },
    "type": "Plane",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "Points": {
    "name": "points",
    "alternateNames": [
      "create points"
    ],
    "defaultNodeName": "points",
    "path": [
      "geometry",
      "create"
    ],
    "help": "Creates points at input positions.",
    "input": {
      "positions": {
        "type": "list:vector",
        "displayName": "positions"
      },
      "reset": {
        "type": "button",
        "default": false,
        "displayName": "initialize"
      },
      "initializationList": {
        "type": "list:vector",
        "displayName": "init list",
        "description": "connect a vector list and initialize to push the vectors as point positions"
      },
      "outputPolymesh": {
        "type": "boolean",
        "default": false,
        "displayName": "output as mesh vertices",
        "description": "output a PolyMesh primitive (vertices only), instead of a PointsPrimitive"
      }
    },
    "type": "Points",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      },
      "selection": {
        "type": "list:boolean",
        "description": "bitmask of which points are selected",
        "displayName": "selection"
      }
    },
    "nodeClass": "primitive"
  },
  "PolyBox": {
    "name": "box",
    "alternateNames": [
      "cube",
      "poly box"
    ],
    "defaultNodeName": "box",
    "path": [
      "geometry",
      "create"
    ],
    "help": "Creates a mesh box.",
    "input": {
      "mode": {
        "type": "enum",
        "options": [
          "normal",
          "CSG"
        ],
        "displayName": "type"
      },
      "center": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "center"
      },
      "scale": {
        "type": "flexi:vector",
        "default": [
          1,
          1,
          1
        ],
        "displayName": "scale"
      },
      "uniformScale": {
        "type": "flexi:float",
        "default": 1000,
        "displayName": "uniform scale"
      }
    },
    "type": "PolyBox",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "PolyCylinder": {
    "name": "cylinder",
    "alternateNames": [
      "tube",
      "poly cylinder"
    ],
    "defaultNodeName": "cylinder",
    "path": [
      "geometry",
      "create"
    ],
    "help": "Creates a cylinder between two vector positions.",
    "input": {
      "start": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "start"
      },
      "end": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          1000
        ],
        "displayName": "end"
      },
      "radius": {
        "type": "flexi:float",
        "default": 500,
        "displayName": "radius"
      },
      "segments": {
        "type": "flexi:integer",
        "default": 16,
        "minimum": 3,
        "maximum": 100,
        "displayName": "segments"
      }
    },
    "type": "PolyCylinder",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "PolySphere": {
    "name": "sphere",
    "alternateNames": [
      "icosphere",
      "globe",
      "ball",
      "poly sphere"
    ],
    "defaultNodeName": "sphere",
    "path": [
      "geometry",
      "create"
    ],
    "help": "Creates a mesh sphere at vector positions.",
    "input": {
      "center": {
        "type": "flexi:vector",
        "description": "center",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "center"
      },
      "radius": {
        "type": "flexi:float",
        "default": 500,
        "displayName": "radius"
      },
      "mode": {
        "type": "enum",
        "options": [
          "ico",
          "columns & rows",
          "CSG"
        ],
        "displayName": "type"
      },
      "detail": {
        "type": "flexi:integer",
        "default": 3,
        "minimum": 1,
        "maximum": 6,
        "displayName": "detail",
        "hideWhen": "mode > 0"
      },
      "columns": {
        "type": "flexi:integer",
        "default": 24,
        "minimum": 1,
        "maximum": 100,
        "displayName": "columns",
        "hideWhen": "mode == 0"
      },
      "rows": {
        "type": "flexi:integer",
        "default": 12,
        "minimum": 1,
        "maximum": 50,
        "displayName": "rows",
        "hideWhen": "mode == 0"
      },
      "phiStart": {
        "type": "flexi:float",
        "default": 0,
        "minimum": 0,
        "maximum": 360,
        "displayName": "phi start",
        "hideWhen": "mode == 0 || mode == 2"
      },
      "phiEnd": {
        "type": "flexi:float",
        "default": 360,
        "minimum": 0,
        "maximum": 360,
        "displayName": "phi end",
        "hideWhen": "mode == 0 || mode == 2"
      },
      "thetaStart": {
        "type": "flexi:float",
        "default": 0,
        "minimum": 0,
        "maximum": 180,
        "displayName": "theta start",
        "hideWhen": "mode == 0 || mode == 2"
      },
      "thetaEnd": {
        "type": "flexi:float",
        "default": 180,
        "minimum": 0,
        "maximum": 180,
        "displayName": "theta end",
        "hideWhen": "mode == 0 || mode == 2"
      }
    },
    "type": "PolySphere",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "Locator": {
    "name": "locator",
    "alternateNames": [
      "handle",
      "snap"
    ],
    "defaultNodeName": "locator",
    "path": [
      "geometry",
      "create"
    ],
    "help": "Creates a locator.",
    "input": {
      "locatorId": {
        "type": "flexi:string",
        "description": "persistent locator ID",
        "displayName": "id",
        "default": "0"
      },
      "position": {
        "type": "flexi:vector",
        "description": "locator position as a vector",
        "displayName": "position",
        "default": [
          0,
          0,
          0
        ]
      },
      "semanticType": {
        "type": "flexi:string",
        "description": "this locator's semantic type",
        "displayName": "type",
        "default": ""
      }
    },
    "type": "Locator",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output locator",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    }
  },
  "Tetrahedron": {
    "name": "tetrahedron",
    "alternateNames": [],
    "defaultNodeName": "tetrahedron",
    "path": [
      "geometry",
      "create"
    ],
    "help": "Creates a tetrahedron mesh at vector positions.",
    "input": {
      "center": {
        "type": "flexi:vector",
        "description": "center",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "center"
      },
      "scale": {
        "type": "flexi:float",
        "default": 500,
        "displayName": "scale"
      },
      "sharedVertices": {
        "type": "boolean",
        "default": false,
        "displayName": "weld vertices"
      }
    },
    "type": "Tetrahedron",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "deprecated": {
      "supersededBy": "TetrahedronV2",
      "deprecationHelpString": "Primitives in this node are incorrectly sized and not positioned at world origin."
    },
    "nodeClass": "node"
  },
  "TetrahedronV2": {
    "name": "tetrahedron",
    "alternateNames": [],
    "defaultNodeName": "tetrahedron",
    "path": [
      "geometry",
      "create"
    ],
    "help": "Creates a tetrahedron mesh at vector positions.",
    "input": {
      "center": {
        "type": "flexi:vector",
        "description": "center",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "center"
      },
      "scale": {
        "type": "flexi:float",
        "default": 500,
        "displayName": "scale"
      },
      "sharedVertices": {
        "type": "boolean",
        "default": false,
        "displayName": "weld vertices"
      }
    },
    "type": "TetrahedronV2",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    }
  },
  "GraphAsset": {
    "name": "graph asset",
    "alternateNames": [
      "graph import",
      "graph reference"
    ],
    "defaultNodeName": "graph asset",
    "path": [
      "geometry",
      "import"
    ],
    "help": "References graphs.",
    "input": {
      "retrieveOnGraphLoad": {
        "type": "boolean",
        "default": false,
        "displayName": "preload asset",
        "description": "Loads the referenced graph asset on load of this graph."
      },
      "assetURI": {
        "type": "assetURI",
        "displayName": "asset uri"
      },
      "latestVersion": {
        "type": "boolean",
        "displayName": "latest version"
      },
      "parameters": {
        "type": "string",
        "default": "{}",
        "displayName": "parameters",
        "description": "parameters as JSON string containing key-value pairs"
      }
    },
    "type": "GraphAsset",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      },
      "assetURI": {
        "type": "assetURI",
        "description": "uri of the referenced graph asset",
        "displayName": "asset uri"
      },
      "assetName": {
        "type": "string",
        "description": "name of the referenced graph asset",
        "displayName": "asset name"
      },
      "parameters": {
        "type": "string",
        "default": "{}",
        "displayName": "parameters",
        "description": "the graph's parameters as JSON string containing key-value pairs"
      }
    }
  },
  "GeometryAsset": {
    "name": "geometry asset",
    "alternateNames": [
      "geo import",
      "load",
      "geometry",
      "obj",
      "iges",
      "igs",
      "stl",
      "dxf"
    ],
    "defaultNodeName": "geometry asset",
    "path": [
      "geometry",
      "import"
    ],
    "help": "Imports geometry.",
    "input": {
      "retrieveOnGraphLoad": {
        "type": "boolean",
        "default": false,
        "displayName": "preload asset",
        "description": "Loads the geometry asset on load of the graph."
      },
      "assetURI": {
        "type": "assetURI",
        "displayName": "asset uri"
      },
      "useGroups": {
        "type": "boolean",
        "displayName": "use OBJ groups",
        "default": false,
        "description": "output each group in an OBJ file as a separate primitive"
      }
    },
    "type": "GeometryAsset",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      },
      "assetURI": {
        "type": "assetURI",
        "description": "uri of the referenced asset",
        "displayName": "asset uri"
      },
      "assetName": {
        "type": "string",
        "description": "name of the referenced geometry asset",
        "displayName": "asset name"
      }
    },
    "nodeClass": "node"
  },
  "ImageAsset": {
    "name": "image asset",
    "alternateNames": [
      "picture",
      "bitmap",
      "texture"
    ],
    "defaultNodeName": "image asset",
    "path": [
      "geometry",
      "material | texture"
    ],
    "help": "Imports an image for use with materials.",
    "input": {
      "retrieveOnGraphLoad": {
        "type": "boolean",
        "default": false,
        "displayName": "preload asset",
        "description": "Loads the image asset on load of the graph."
      },
      "assetURI": {
        "type": "string",
        "displayName": "asset uri"
      }
    },
    "type": "ImageAsset",
    "output": {
      "assetURI": {
        "type": "assetURI",
        "description": "uri of the referenced image asset",
        "displayName": "asset uri"
      },
      "assetName": {
        "type": "string",
        "description": "name of the referenced image asset",
        "displayName": "asset name"
      }
    },
    "nodeClass": "ui-if-menu"
  },
  "SetMaterial": {
    "name": "material",
    "alternateNames": [
      "set material",
      "shader",
      "shading",
      "roughness",
      "reflectance",
      "albedo",
      "opacity",
      "transparency",
      "emission",
      "bump"
    ],
    "defaultNodeName": "material",
    "path": [
      "geometry",
      "material | texture"
    ],
    "help": "Sets the material properties of primitives.",
    "input": {
      "mask": {
        "type": "list:boolean",
        "displayName": "primitive mask",
        "description": "Boolean list indicating which primitives to apply the material to."
      },
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "setAlbedo": {
        "type": "boolean",
        "default": false,
        "displayName": "set base color"
      },
      "albedo": {
        "type": "flexi:color",
        "default": [
          1,
          1,
          1
        ],
        "displayName": "base color",
        "description": "albedo color",
        "hideWhen": "!setAlbedo"
      },
      "setAlbedoTexture": {
        "type": "boolean",
        "default": false,
        "displayName": "set base texture"
      },
      "albedoTexture": {
        "type": "assetURI",
        "displayName": "base texture",
        "description": "Image texture url(s) (or connect the url output of an image texture node).",
        "hideWhen": "!setAlbedoTexture"
      },
      "setOpacity": {
        "type": "boolean",
        "default": false,
        "displayName": "set opacity"
      },
      "opacity": {
        "type": "flexi:float",
        "default": 1,
        "minimum": 0,
        "maximum": 1,
        "description": "if < 1, the material becomes transparent",
        "displayName": "opacity",
        "hideWhen": "!setOpacity"
      },
      "opacityTexture": {
        "type": "assetURI",
        "displayName": "opacity texture",
        "description": "Image texture url(s) (or connect the url output of an image texture node).",
        "hideWhen": "!setOpacity"
      },
      "setRoughness": {
        "type": "boolean",
        "default": false,
        "displayName": "set roughness"
      },
      "roughness": {
        "type": "flexi:float",
        "default": 1,
        "minimum": 0,
        "maximum": 1,
        "displayName": "specular roughness",
        "hideWhen": "!setRoughness"
      },
      "roughnessTexture": {
        "type": "assetURI",
        "displayName": "roughness texture",
        "description": "Image texture url(s) (or connect the url output of an image texture node).",
        "hideWhen": "!setRoughness"
      },
      "setMetallic": {
        "type": "boolean",
        "default": false,
        "displayName": "set metallic"
      },
      "metallic": {
        "type": "flexi:float",
        "default": 0,
        "minimum": 0,
        "maximum": 1,
        "displayName": "metallic",
        "hideWhen": "!setMetallic"
      },
      "metallicTexture": {
        "type": "assetURI",
        "displayName": "metallic texture",
        "description": "Image texture url(s) (or connect the url output of an image texture node).",
        "hideWhen": "!setMetallic"
      },
      "setReflectance": {
        "type": "boolean",
        "default": false,
        "displayName": "set reflectance"
      },
      "reflectance": {
        "type": "flexi:float",
        "default": 0,
        "minimum": 0,
        "maximum": 1,
        "displayName": "reflectance",
        "hideWhen": "!setReflectance"
      },
      "reflectanceTexture": {
        "type": "assetURI",
        "displayName": "reflectance texture",
        "description": "Image texture url(s) (or connect the url output of an image texture node).",
        "hideWhen": "!setReflectance"
      },
      "setBump": {
        "type": "boolean",
        "default": false,
        "displayName": "set bump"
      },
      "bump": {
        "type": "flexi:float",
        "default": 0,
        "minimum": -10,
        "maximum": 10,
        "displayName": "bump",
        "hideWhen": "!setBump"
      },
      "bumpTexture": {
        "type": "assetURI",
        "displayName": "bump texture",
        "description": "Image texture url(s) (or connect the url output of an image texture node).",
        "hideWhen": "!setBump"
      },
      "setEmission": {
        "type": "boolean",
        "default": false,
        "displayName": "set incandescence"
      },
      "emission": {
        "type": "flexi:color",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "incandescence",
        "description": "incandescence color",
        "hideWhen": "!setEmission"
      },
      "emissionTexture": {
        "type": "assetURI",
        "displayName": "incandescence texture",
        "description": "Image texture url(s) (or connect the url output of an image texture node).",
        "hideWhen": "!setEmission"
      },
      "setDoubleSided": {
        "type": "boolean",
        "default": false,
        "displayName": "set double-sided"
      },
      "doubleSided": {
        "type": "flexi:boolean",
        "default": true,
        "displayName": "double-sided",
        "description": "Whether to render one or both sides of surfaces.",
        "hideWhen": "!setDoubleSided"
      },
      "setUVscale": {
        "type": "boolean",
        "default": false,
        "displayName": "set texture size"
      },
      "UVscale": {
        "type": "flexi:float",
        "default": 1,
        "displayName": "texture size",
        "hideWhen": "!setUVscale"
      }
    },
    "type": "SetMaterial",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "SetColor": {
    "name": "set color",
    "alternateNames": [
      "alpha",
      "wireframe",
      "transparency",
      "transparent"
    ],
    "defaultNodeName": "set color",
    "path": [
      "geometry",
      "material | texture"
    ],
    "help": "Sets the color and alpha of primitives.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "mode": {
        "type": "enum",
        "options": [
          "surface (diffuse) color",
          "mesh wireframe colors"
        ],
        "displayName": "set"
      },
      "color": {
        "type": "flexi:color",
        "default": [
          0,
          0,
          0
        ],
        "description": "connect a list to set color per-primitive",
        "displayName": "color"
      },
      "alpha": {
        "type": "flexi:float",
        "default": 1,
        "minimum": 0,
        "maximum": 1,
        "description": "if < 1, the material becomes transparent (and one-sided, so you might have to flip normals)",
        "displayName": "alpha"
      },
      "edgeColor": {
        "type": "flexi:color",
        "default": [
          0,
          0,
          0
        ],
        "description": "connect a list to set edge color per-primitive",
        "displayName": "edge color",
        "hideWhen": "mode == 0"
      },
      "edgeAlpha": {
        "type": "flexi:float",
        "default": 1,
        "minimum": 0,
        "maximum": 1,
        "description": "connect a list to set edge alpha per-primitive",
        "displayName": "edge alpha",
        "hideWhen": "mode == 0"
      },
      "mask": {
        "type": "list:boolean",
        "displayName": "primitive mask",
        "description": "connect a boolean list to only set colors on some primitives"
      }
    },
    "type": "SetColor",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "ClosestPointOnCurve": {
    "name": "closest point on curve",
    "alternateNames": [
      "nearest",
      "distance"
    ],
    "defaultNodeName": "closest point on curve",
    "path": [
      "geometry",
      "measure"
    ],
    "help": "Finds the closest point on a input curve to input points.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "curves to find closest point on",
        "displayName": "geometry"
      },
      "positions": {
        "type": "list:vector",
        "displayName": "positions"
      },
      "precision": {
        "type": "integer",
        "default": 3,
        "minimum": 1,
        "maximum": 6,
        "displayName": "accuracy"
      }
    },
    "type": "ClosestPointOnCurve",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "closest point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "closest point x coordinates",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "closest point y coordinates",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "closest point z coordinates",
        "displayName": "points.z"
      },
      "distances": {
        "type": "list:float",
        "description": "distance to closest positions",
        "displayName": "distances"
      },
      "u coordinates": {
        "type": "list:float",
        "description": "curve u value at closest positions",
        "displayName": "u coordinates"
      }
    },
    "nodeClass": "node"
  },
  "ClosestPointsToPoints": {
    "name": "closest points to points",
    "alternateNames": [
      "nearest points",
      "distance",
      "radius",
      "neighbour",
      "neighbor"
    ],
    "defaultNodeName": "closest points to points",
    "path": [
      "geometry",
      "measure"
    ],
    "help": "Finds the closest target points to source points.",
    "input": {
      "mode": {
        "type": "enum",
        "options": [
          "closest point",
          "number of points within radius"
        ],
        "displayName": "mode"
      },
      "sourcePoints": {
        "type": "list:vector",
        "displayName": "source points",
        "description": "find closest points to these points amongst the target points"
      },
      "targetPoints": {
        "type": "list:vector",
        "displayName": "target points",
        "description": "find closest points to source points amongst these points"
      },
      "calculateDistances": {
        "type": "boolean",
        "default": false,
        "displayName": "calculate distances",
        "description": "calculate distances from source points to their nearest target points"
      },
      "radius": {
        "type": "float",
        "default": 1,
        "displayName": "radius"
      }
    },
    "type": "ClosestPointsToPoints",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "closest points to source points amongst target points",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "closest points x coordinates",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "closest points y coordinates",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "closest points z coordinates",
        "displayName": "points.z"
      },
      "indices": {
        "type": "list:integer",
        "description": "closest target points' indices",
        "displayName": "indices"
      },
      "distances": {
        "type": "list:float",
        "description": "distances from source points to their nearest target points",
        "displayName": "distances"
      },
      "number of points within radius": {
        "type": "list:integer",
        "displayName": "number of points within radius"
      }
    },
    "nodeClass": "node"
  },
  "Normals": {
    "name": "normals",
    "alternateNames": [],
    "defaultNodeName": "normals",
    "path": [
      "geometry",
      "measure"
    ],
    "help": "Calculates and displays the normals, tangents and binormals of primitives.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "mode": {
        "type": "enum",
        "options": [
          "normals only",
          "tangents, normals, binormals (basis)"
        ],
        "description": "each vector is paired with a point, so a basis will output 3 vectors and 3 (!) points per incoming point",
        "displayName": "mode"
      },
      "tangents": {
        "type": "list:vector",
        "description": "tangents (green)",
        "displayName": "tangents"
      },
      "normals": {
        "type": "list:vector",
        "description": "normals (blue)",
        "displayName": "normals"
      },
      "binormals": {
        "type": "list:vector",
        "description": "bitangents (red)",
        "displayName": "binormals"
      },
      "defaultNormal": {
        "type": "vector",
        "default": [
          0,
          1,
          0
        ],
        "displayName": "default normal"
      },
      "scale": {
        "type": "float",
        "default": 1,
        "displayName": "scale"
      }
    },
    "type": "Normals",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      },
      "tangents": {
        "type": "list:vector",
        "displayName": "tangents"
      },
      "normals": {
        "type": "list:vector",
        "displayName": "normals"
      },
      "binormals": {
        "type": "list:vector",
        "displayName": "binormals"
      }
    },
    "nodeClass": "node"
  },
  "NumPoints": {
    "name": "# points",
    "alternateNames": [
      "number of points",
      "amount of points"
    ],
    "defaultNodeName": "# points",
    "path": [
      "geometry",
      "measure"
    ],
    "help": "Calculates the point count of input primitives.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "minusOne": {
        "displayName": "minus one",
        "type": "boolean",
        "default": false
      }
    },
    "type": "NumPoints",
    "output": {
      "numPoints": {
        "type": "integer",
        "displayName": "number of points"
      }
    },
    "nodeClass": "value"
  },
  "NumPrimitives": {
    "name": "# primitives",
    "alternateNames": [
      "number of primitives",
      "amount of primitives"
    ],
    "defaultNodeName": "# primitives",
    "path": [
      "geometry",
      "measure"
    ],
    "help": "Calculates the number of input primitives.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "minusOne": {
        "displayName": "minus one",
        "type": "boolean",
        "default": false
      }
    },
    "type": "NumPrimitives",
    "output": {
      "numPrimitives": {
        "type": "integer",
        "description": "number of primitives",
        "displayName": "numPrimitives"
      }
    },
    "nodeClass": "value"
  },
  "PolyArea": {
    "name": "mesh area",
    "alternateNames": [
      "triangle area",
      "mesh surface"
    ],
    "defaultNodeName": "mesh area",
    "path": [
      "geometry",
      "measure"
    ],
    "help": "Calculates the area of mesh triangles.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      }
    },
    "type": "PolyArea",
    "output": {
      "triangle areas": {
        "type": "list:float",
        "description": "area of each triangle",
        "displayName": "triangle areas"
      },
      "total area": {
        "type": "float",
        "description": "total area of all triangles & meshes",
        "displayName": "total area"
      }
    },
    "nodeClass": "math"
  },
  "PolyCentroids": {
    "name": "triangle centroids",
    "alternateNames": [
      "polygon centers"
    ],
    "defaultNodeName": "triangle centroids",
    "path": [
      "geometry",
      "measure"
    ],
    "help": "Calculates the center of input triangles.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      }
    },
    "type": "PolyCentroids",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "centroid positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "centroid x coordinates",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "centroid y coordinates",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "centroid z coordinates",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "GeometryBounds": {
    "name": "geometry bounds",
    "alternateNames": [
      "extent",
      "min",
      "max"
    ],
    "defaultNodeName": "geometry bounds",
    "path": [
      "geometry",
      "measure",
      "bounding box"
    ],
    "help": "Calculates the bounds of primitives.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "reverseResult": {
        "type": "boolean",
        "default": false,
        "displayName": "output opposite"
      }
    },
    "type": "GeometryBounds",
    "output": {
      "xMin": {
        "type": "float",
        "displayName": "xMin"
      },
      "yMin": {
        "type": "float",
        "displayName": "yMin"
      },
      "zMin": {
        "type": "float",
        "displayName": "zMin"
      },
      "xMax": {
        "type": "float",
        "displayName": "xMax"
      },
      "yMax": {
        "type": "float",
        "displayName": "yMax"
      },
      "zMax": {
        "type": "float",
        "displayName": "zMax"
      },
      "primitive minimum bounds": {
        "type": "list:vector",
        "displayName": "primitive minimum bounds"
      },
      "primitive maximum bounds": {
        "type": "list:vector",
        "displayName": "primitive maximum bounds"
      }
    },
    "nodeClass": "value"
  },
  "GeometryCentroid": {
    "name": "geometry centroid",
    "alternateNames": [],
    "defaultNodeName": "geometry centroid",
    "path": [
      "geometry",
      "measure",
      "bounding box"
    ],
    "help": "Calculates the centroid of primitives.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "reverseResult": {
        "type": "boolean",
        "default": false,
        "displayName": "output opposite"
      }
    },
    "type": "GeometryCentroid",
    "output": {
      "center": {
        "type": "vector",
        "displayName": "center"
      },
      "centerX": {
        "type": "float",
        "displayName": "centerX"
      },
      "centerY": {
        "type": "float",
        "displayName": "centerY"
      },
      "centerZ": {
        "type": "float",
        "displayName": "centerZ"
      },
      "primitive centers": {
        "type": "list:vector",
        "displayName": "primitive centers"
      }
    },
    "nodeClass": "value"
  },
  "GeometrySize": {
    "name": "geometry size",
    "alternateNames": [],
    "defaultNodeName": "geometry size",
    "path": [
      "geometry",
      "measure",
      "bounding box"
    ],
    "help": "Calculates the size of primitives.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      }
    },
    "type": "GeometrySize",
    "output": {
      "size": {
        "type": "vector",
        "displayName": "size"
      },
      "sizeX": {
        "type": "float",
        "displayName": "sizeX"
      },
      "sizeY": {
        "type": "float",
        "displayName": "sizeY"
      },
      "sizeZ": {
        "type": "float",
        "displayName": "sizeZ"
      },
      "primitive sizes": {
        "type": "list:vector",
        "displayName": "primitive sizes"
      }
    },
    "nodeClass": "value"
  },
  "ExtrudeCurve": {
    "name": "extrude curve",
    "alternateNames": [],
    "defaultNodeName": "extrude curve",
    "path": [
      "geometry",
      "modify",
      "curve"
    ],
    "help": "Extrudes curves in a vector direction.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "extrusion": {
        "type": "vector",
        "default": [
          0,
          0,
          1
        ],
        "displayName": "extrusion"
      },
      "order": {
        "type": "integer",
        "default": 2,
        "minimum": 2,
        "maximum": 10,
        "displayName": "order"
      },
      "nrOfSpans": {
        "type": "integer",
        "default": 1,
        "displayName": "number of spans"
      }
    },
    "type": "ExtrudeCurve",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "InsertKnot": {
    "name": "insert knot",
    "alternateNames": [
      "add point"
    ],
    "defaultNodeName": "insert knot",
    "path": [
      "geometry",
      "modify",
      "curve"
    ],
    "help": "Inserts a control point on a curve.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "u": {
        "type": "float",
        "default": 0.5,
        "minimum": 0,
        "maximum": 1,
        "displayName": "u"
      }
    },
    "type": "InsertKnot",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "JoinCurves": {
    "name": "join curves",
    "alternateNames": [
      "merge",
      "connect"
    ],
    "defaultNodeName": "join curves",
    "path": [
      "geometry",
      "modify",
      "curve"
    ],
    "help": "Joins curve ends using a distance threshold.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "tolerance": {
        "type": "float",
        "default": 1e-16,
        "description": "max distance between end points for curves to join",
        "displayName": "tolerance"
      },
      "deleteLastPoint": {
        "type": "boolean",
        "default": false,
        "displayName": "delete last point",
        "description": "deletes the last point of every joined curve"
      }
    },
    "type": "JoinCurves",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "PointsToCurve": {
    "name": "points to curve",
    "alternateNames": [
      "create curve"
    ],
    "defaultNodeName": "points to curve",
    "path": [
      "geometry",
      "modify",
      "curve"
    ],
    "help": "Creates a curve using input points.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "pointsPerCurve": {
        "type": "integer",
        "displayName": "points per curve"
      },
      "order": {
        "type": "integer",
        "default": 2,
        "minimum": 2,
        "maximum": 10,
        "displayName": "order"
      },
      "keepIncomingGeo": {
        "type": "boolean",
        "default": false,
        "displayName": "keepIncomingGeo"
      },
      "beziers": {
        "type": "boolean",
        "default": false,
        "displayName": "beziers"
      }
    },
    "type": "PointsToCurve",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "SimplifyCurve": {
    "name": "simplify curve",
    "alternateNames": [
      "redraw",
      "reduce"
    ],
    "defaultNodeName": "simplify curve",
    "path": [
      "geometry",
      "modify",
      "curve"
    ],
    "help": "Simplifies inputs curves using a angle threshold.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "angleThreshold": {
        "type": "float",
        "default": 180,
        "minimum": 90,
        "maximum": 180,
        "displayName": "angle threshold",
        "description": "angle between line segments above which to discard of the point connecting the line segments"
      }
    },
    "type": "SimplifyCurve",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "SplitCurve": {
    "name": "split curve",
    "alternateNames": [
      "cut",
      "carve"
    ],
    "defaultNodeName": "split curve",
    "path": [
      "geometry",
      "modify",
      "curve"
    ],
    "help": "Splits curves into parts, or extracts splitting points.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "u": {
        "type": "float",
        "default": 0.500000001,
        "minimum": 0,
        "maximum": 1,
        "displayName": "u"
      },
      "outputSplitPoints": {
        "type": "boolean",
        "description": "do not output split curves, but rather the split points",
        "displayName": "split points only"
      }
    },
    "type": "SplitCurve",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "TesselateCurve": {
    "name": "curve to polyline",
    "alternateNames": [
      "redraw",
      "divide",
      "tessellate curve"
    ],
    "defaultNodeName": "curve to polyline",
    "path": [
      "geometry",
      "modify",
      "curve"
    ],
    "help": "Subdivides a curve into a polyline (a curve of order 2).",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "mode": {
        "type": "enum",
        "options": [
          "# of segments",
          "segment length",
          "approx segment length"
        ],
        "description": "'approx segment length' scales the length by the nearest value that creates even length segments while preserving the end point (end point is not preserved with hard segment length)",
        "displayName": "mode"
      },
      "segments": {
        "type": "integer",
        "default": 8,
        "minimum": 1,
        "maximum": 1000,
        "displayName": "segments",
        "hideWhen": "mode == 1 || mode == 2"
      },
      "length": {
        "type": "float",
        "default": 100,
        "displayName": "length",
        "hideWhen": "mode == 0"
      },
      "lengthFidelity": {
        "type": "integer",
        "default": 100,
        "minimum": 10,
        "maximum": 1000,
        "displayName": "accuracy"
      },
      "perSegment": {
        "type": "boolean",
        "default": false,
        "displayName": "per order 2 segment",
        "description": "Polyline (order 2 curves) only: divide per polyline segment (preserves original point positions)."
      }
    },
    "type": "TesselateCurve",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      },
      "u coordinates": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "u coordinates"
      },
      "curve lengths": {
        "type": "list:float",
        "description": "list of curve lengths (1 per input curve)",
        "displayName": "curve lengths"
      }
    },
    "nodeClass": "node"
  },
  "UnrollCurve": {
    "name": "unroll curve",
    "alternateNames": [
      "curve length"
    ],
    "defaultNodeName": "unroll curve",
    "path": [
      "geometry",
      "modify",
      "curve"
    ],
    "help": "Unrolls each curve along x axis.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "origin": {
        "type": "vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "origin"
      },
      "direction": {
        "type": "vector",
        "default": [
          1,
          0,
          0
        ],
        "displayName": "direction"
      }
    },
    "type": "UnrollCurve",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "CombineMeshes": {
    "name": "combine meshes",
    "alternateNames": [
      "merge meshes",
      "unify meshes",
      "join"
    ],
    "defaultNodeName": "combine meshes",
    "path": [
      "geometry",
      "modify",
      "mesh"
    ],
    "help": "Combines meshes into a single mesh.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry",
        "multigeo": true
      },
      "flattenGroups": {
        "type": "enum",
        "options": [
          "exclude meshes from groups",
          "include meshes from groups",
          "combine per top-level group"
        ],
        "displayName": "group behavior"
      }
    },
    "type": "CombineMeshes",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "Extrude": {
    "name": "extrude mesh",
    "alternateNames": [],
    "defaultNodeName": "extrude",
    "path": [
      "geometry",
      "modify",
      "mesh"
    ],
    "help": "Extrudes all input faces.",
    "input": {
      "geometry": {
        "type": "geometry",
        "displayName": "geometry"
      },
      "distance": {
        "type": "flexi:float",
        "default": 1000,
        "description": "distance to extrude",
        "displayName": "distance"
      },
      "keep": {
        "type": "enum",
        "options": [
          "all",
          "sides",
          "extruded cap",
          "caps",
          "sides & extruded cap"
        ],
        "displayName": "keep"
      },
      "flipDirection": {
        "type": "boolean",
        "displayName": "flip direction",
        "default": false
      },
      "flipNormals": {
        "type": "boolean",
        "displayName": "flip normals",
        "default": false
      }
    },
    "type": "Extrude",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "ReverseMesh": {
    "name": "flip mesh normals",
    "alternateNames": [
      "invert",
      "reverse mesh"
    ],
    "defaultNodeName": "flip mesh normals",
    "path": [
      "geometry",
      "modify",
      "mesh"
    ],
    "help": "Flips mesh normals.",
    "input": {
      "geometry": {
        "type": "geometry",
        "displayName": "geometry"
      }
    },
    "type": "ReverseMesh",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "MeshBoundary": {
    "name": "mesh boundary",
    "alternateNames": [
      "edges",
      "contour",
      "border"
    ],
    "defaultNodeName": "mesh boundary",
    "path": [
      "geometry",
      "modify",
      "mesh"
    ],
    "help": "Creates polyline curves around all mesh boundaries.",
    "input": {
      "geometry": {
        "type": "geometry",
        "displayName": "geometry"
      }
    },
    "type": "MeshBoundary",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      },
      "boundary mask": {
        "type": "list:boolean",
        "displayName": "boundary mask"
      },
      "boundary indices": {
        "type": "list:integer",
        "displayName": "boundary indices"
      }
    },
    "nodeClass": "node"
  },
  "PolyClean": {
    "name": "clean mesh",
    "alternateNames": [
      "delete zero area",
      "clean mesh"
    ],
    "defaultNodeName": "clean mesh",
    "path": [
      "geometry",
      "modify",
      "mesh"
    ],
    "help": "Attempts to clean up mesh geometry.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "deleteZeroArea": {
        "type": "boolean",
        "default": false,
        "displayName": "nuke small triangles",
        "description": "delete triangles with area below threshold"
      },
      "areaThreshold": {
        "type": "float",
        "default": 0.001,
        "displayName": "area threshold"
      },
      "deleteOrphanVertices": {
        "type": "boolean",
        "default": false,
        "displayName": "nuke orphan points",
        "description": "delete vertices not associated with any triangles"
      }
    },
    "type": "PolyClean",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "UnweldVertices": {
    "name": "unweld vertices",
    "alternateNames": [
      "hard edges",
      "facet"
    ],
    "defaultNodeName": "unweld vertices",
    "path": [
      "geometry",
      "modify",
      "mesh"
    ],
    "help": "Splits shared triangle vertices on meshes.",
    "input": {
      "geometry": {
        "type": "geometry",
        "displayName": "geometry"
      }
    },
    "type": "UnweldVertices",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "WeldVertices": {
    "name": "weld vertices",
    "alternateNames": [
      "smooth normals",
      "merge points",
      "weld polygons"
    ],
    "defaultNodeName": "weld vertices",
    "path": [
      "geometry",
      "modify",
      "mesh"
    ],
    "help": "Welds overlapping mesh triangle edges based on an angle threshold.",
    "input": {
      "geometry": {
        "type": "geometry",
        "displayName": "geometry"
      },
      "radius": {
        "type": "float",
        "default": 0.00001,
        "description": "Weld vertices within this radius of each other.",
        "displayName": "radius"
      },
      "angleThreshold": {
        "type": "float",
        "default": 0,
        "minimum": 0,
        "maximum": 180,
        "displayName": "angle threshold",
        "description": "min angle between adjacent mesh triangles for welding to occur"
      },
      "averagePosition": {
        "type": "boolean",
        "default": true,
        "displayName": "average position",
        "description": "average position of welded vertices"
      },
      "nukeZeroAreaTris": {
        "type": "boolean",
        "default": true,
        "displayName": "nuke ghost triangles",
        "description": "after weld, delete zero area triangles (often created by the weld)"
      },
      "nukeOrphans": {
        "type": "boolean",
        "default": false,
        "displayName": "nuke orphan points",
        "description": "after weld, delete vertices not associated with any triangles"
      },
      "mask": {
        "type": "list:boolean",
        "description": "(boolean list) if connected, only weld vertices with mask set to true",
        "displayName": "mask"
      }
    },
    "type": "WeldVertices",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "DeletePoints": {
    "name": "delete points",
    "alternateNames": [
      "erase",
      "nuke"
    ],
    "defaultNodeName": "delete points",
    "path": [
      "geometry",
      "modify",
      "points"
    ],
    "help": "Deletes points using a mask or index list.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "mask": {
        "type": "list:boolean",
        "description": "a bit mask of points to delete",
        "displayName": "mask"
      },
      "indexList": {
        "type": "list:integer",
        "description": "points with these indices will be deleted",
        "displayName": "index list"
      },
      "invert": {
        "type": "boolean",
        "default": false,
        "description": "invert the deletion mask",
        "displayName": "invert"
      }
    },
    "type": "DeletePoints",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "ExtractPoints": {
    "name": "get points",
    "alternateNames": [
      "extract points",
      "isoparm",
      "nurbs"
    ],
    "defaultNodeName": "get points",
    "path": [
      "geometry",
      "modify",
      "points"
    ],
    "help": "Gets the points of input primitives using a mask.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "mask": {
        "type": "list:boolean",
        "displayName": "mask"
      }
    },
    "type": "ExtractPoints",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "Output points",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "SetPointWeight": {
    "name": "set point weight",
    "alternateNames": [
      "edit point weight",
      "weigth"
    ],
    "defaultNodeName": "set point weight",
    "path": [
      "geometry",
      "modify",
      "points"
    ],
    "help": "Sets point weights.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "weights": {
        "type": "list:float",
        "displayName": "weights"
      },
      "defaultWeight": {
        "type": "float",
        "default": 1,
        "displayName": "default weight"
      }
    },
    "type": "SetPointWeight",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "points at input positions",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point position vectors",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point position x coordinates",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point position y coordinates",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point position z coordinates",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "SetPoints": {
    "name": "set points",
    "alternateNames": [
      "set positions"
    ],
    "defaultNodeName": "set points",
    "path": [
      "geometry",
      "modify",
      "points"
    ],
    "help": "Sets the position of points using x,y,z values.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "x": {
        "type": "flexi:float",
        "displayName": "x"
      },
      "y": {
        "type": "flexi:float",
        "displayName": "y"
      },
      "z": {
        "type": "flexi:float",
        "displayName": "z"
      },
      "mask": {
        "type": "list:boolean",
        "displayName": "mask"
      }
    },
    "type": "SetPoints",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "DeletePrimitives": {
    "name": "delete primitives",
    "alternateNames": [
      "erase",
      "nuke"
    ],
    "defaultNodeName": "delete primitives",
    "path": [
      "geometry",
      "modify",
      "primitives"
    ],
    "help": "Deletes primitives using a mask or index list.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "mask": {
        "type": "list:boolean",
        "description": "a bit mask of primitives to delete",
        "displayName": "mask"
      },
      "indexList": {
        "type": "list:integer",
        "description": "primitives with these indices will be deleted",
        "displayName": "index list"
      },
      "invert": {
        "type": "boolean",
        "default": false,
        "description": "invert the deletion mask",
        "displayName": "invert"
      },
      "keepPoints": {
        "type": "boolean",
        "default": false,
        "displayName": "keep points"
      }
    },
    "type": "DeletePrimitives",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "GetPrimitive": {
    "name": "get primitive",
    "alternateNames": [
      "delete",
      "choose"
    ],
    "defaultNodeName": "get primitive",
    "path": [
      "geometry",
      "modify",
      "primitives"
    ],
    "help": "Gets primitives using input indices.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "index": {
        "type": "flexi:integer",
        "default": 0,
        "description": "get primitive with this index from incoming list of primitives 9list of indices also allowed)",
        "displayName": "index"
      },
      "invert": {
        "type": "boolean",
        "default": false,
        "description": "invert the selection",
        "displayName": "invert"
      }
    },
    "type": "GetPrimitive",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "GroupPrimitives": {
    "name": "group",
    "alternateNames": [
      "group primitives",
      "assemble"
    ],
    "defaultNodeName": "group",
    "path": [
      "geometry",
      "modify",
      "primitives"
    ],
    "help": "Groups primitives into new \"group\" primitives.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry",
        "multigeo": true
      },
      "groupName": {
        "type": "string",
        "description": "name of the group",
        "displayName": "group name"
      }
    },
    "type": "GroupPrimitives",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "ReversePrimitiveList": {
    "name": "reverse primitive list",
    "alternateNames": [],
    "defaultNodeName": "reverse primitive list",
    "path": [
      "geometry",
      "modify",
      "primitives"
    ],
    "help": "Reverses the order of primitives.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      }
    },
    "type": "ReversePrimitiveList",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "ShiftPrimitiveList": {
    "name": "shift primitive list",
    "alternateNames": [],
    "defaultNodeName": "shift primitive list",
    "path": [
      "geometry",
      "modify",
      "primitives"
    ],
    "help": "Shifts the primitive order.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "shift": {
        "type": "integer",
        "default": 0,
        "displayName": "shift"
      }
    },
    "type": "ShiftPrimitiveList",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "UnGroupPrimitives": {
    "name": "ungroup",
    "alternateNames": [
      "ungroup primitives",
      "disassemble",
      "split group"
    ],
    "defaultNodeName": "ungroup",
    "path": [
      "geometry",
      "modify",
      "primitives"
    ],
    "help": "Ungroups \"group\" primitives.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "mode": {
        "type": "enum",
        "options": [
          "flatten whole hierarchy",
          "ungroup one level"
        ],
        "displayName": "mode"
      }
    },
    "type": "UnGroupPrimitives",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "ExtractCurve": {
    "name": "curve from surface",
    "alternateNames": [
      "isoparm",
      "nurbs patch"
    ],
    "defaultNodeName": "curve from surface",
    "path": [
      "geometry",
      "modify",
      "surface"
    ],
    "help": "Extracts a curve from a NURBS surface using U or V values.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "uvParameter": {
        "type": "float",
        "default": 0.5,
        "minimum": 0,
        "maximum": 1,
        "displayName": "location",
        "description": "The U or V location to extract the curve from."
      },
      "extractU": {
        "type": "boolean",
        "default": true,
        "displayName": "along U",
        "description": "If true, use the surface's U coordinate for the curve's location.  If false, use V."
      }
    },
    "type": "ExtractCurve",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "Skin": {
    "name": "loft",
    "alternateNames": [
      "skin",
      "revolve"
    ],
    "defaultNodeName": "loft",
    "path": [
      "geometry",
      "modify",
      "surface"
    ],
    "help": "Creates a surface by lofting curves.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry",
        "multigeo": true
      },
      "mode": {
        "type": "enum",
        "options": [
          "per geometry input",
          "between geometry inputs",
          "all input curves"
        ],
        "displayName": "mode"
      },
      "outputType": {
        "type": "enum",
        "options": [
          "mesh",
          "NURBS surface"
        ],
        "displayName": "loft type"
      },
      "per": {
        "type": "integer",
        "default": 0,
        "description": "How many curves per loft (0 to loft all).",
        "displayName": "per",
        "hideWhen": "mode < 2"
      },
      "interpolate": {
        "type": "boolean",
        "default": true,
        "displayName": "interpolate",
        "hideWhen": "outputType == 0"
      },
      "orderU": {
        "type": "integer",
        "default": 2,
        "minimum": 2,
        "maximum": 10,
        "displayName": "order U",
        "description": "The NURBS order of the surface perpendicular to the input curves.",
        "hideWhen": "outputType == 0"
      },
      "meshSmoothness": {
        "type": "integer",
        "default": 1,
        "minimum": 1,
        "maximum": 6,
        "description": "Amount of subdivision along direction of input curves of order > 2.",
        "displayName": "mesh smoothness",
        "hideWhen": "outputType == 1"
      },
      "weld": {
        "type": "boolean",
        "default": true,
        "description": "Weld the result of the loft.",
        "displayName": "weld",
        "hideWhen": "outputType == 1"
      }
    },
    "type": "Skin",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "primitive"
  },
  "SplitPatch": {
    "name": "split surface",
    "alternateNames": [
      "cut",
      "nurbs",
      "split patch",
      "carve"
    ],
    "defaultNodeName": "split surface",
    "path": [
      "geometry",
      "modify",
      "surface"
    ],
    "help": "Splits NURBS surfaces along a U or V value.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "direction": {
        "type": "enum",
        "options": [
          "U",
          "V"
        ],
        "displayName": "direction"
      },
      "uv": {
        "type": "float",
        "default": 0.500000001,
        "minimum": 0,
        "maximum": 1,
        "displayName": "location"
      },
      "discard": {
        "type": "enum",
        "options": [
          "none",
          "first",
          "second"
        ],
        "displayName": "discard"
      }
    },
    "type": "SplitPatch",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "TesselatePatch": {
    "name": "triangulate surface",
    "alternateNames": [
      "nurbs to polygon",
      "nurbs patch to triangles",
      "mesh",
      "tesselate",
      "tessellate",
      "convert"
    ],
    "defaultNodeName": "triangulate surface",
    "path": [
      "geometry",
      "modify",
      "surface"
    ],
    "help": "Converts NURBS surfaces to meshes.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "mode": {
        "type": "enum",
        "options": [
          "combine U & V quality",
          "separate U & V quality"
        ],
        "displayName": "mode"
      },
      "quality": {
        "type": "integer",
        "default": 2,
        "minimum": 1,
        "maximum": 5,
        "displayName": "quality",
        "hideWhen": "mode == 1"
      },
      "qualityU": {
        "type": "integer",
        "default": 1,
        "minimum": 1,
        "maximum": 5,
        "displayName": "qualityU",
        "hideWhen": "mode == 0"
      },
      "qualityV": {
        "type": "integer",
        "default": 1,
        "minimum": 1,
        "maximum": 5,
        "displayName": "qualityV",
        "hideWhen": "mode == 0"
      }
    },
    "type": "TesselatePatch",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "Align": {
    "name": "align",
    "alternateNames": [],
    "defaultNodeName": "align",
    "path": [
      "geometry",
      "transform"
    ],
    "help": "Aligns input geometries to each other.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry",
        "multigeo": true
      },
      "mode": {
        "type": "enum",
        "displayName": "mode",
        "options": [
          "between primitive connections",
          "all input primitives"
        ],
        "description": "treat every geometry connection as a group, or work with the primitive soup (there might be multiple primitives per connection)"
      },
      "xAlignment": {
        "type": "enum",
        "displayName": "x align target",
        "options": [
          "none",
          "min",
          "centroid",
          "max"
        ]
      },
      "xAlignMode": {
        "type": "enum",
        "displayName": "x source",
        "options": [
          "first connection or primitive",
          "average of all",
          "value"
        ],
        "hideWhen": "xAlignment == 0"
      },
      "xAlignmentTo": {
        "type": "enum",
        "displayName": "of x source",
        "options": [
          "min",
          "centroid",
          "max"
        ],
        "hideWhen": "xAlignment == 0 || xAlignMode == 2"
      },
      "xAlignmentValue": {
        "type": "float",
        "default": 0,
        "displayName": "x value",
        "hideWhen": "xAlignMode < 2"
      },
      "xAlignmentOffset": {
        "type": "float",
        "default": 0,
        "displayName": "x offset",
        "hideWhen": "xAlignment == 0"
      },
      "yAlignment": {
        "type": "enum",
        "displayName": "y align target",
        "options": [
          "none",
          "min",
          "centroid",
          "max"
        ]
      },
      "yAlignMode": {
        "type": "enum",
        "displayName": "y source",
        "options": [
          "first connection or primitive",
          "average of all",
          "value"
        ],
        "hideWhen": "yAlignment == 0"
      },
      "yAlignmentTo": {
        "type": "enum",
        "displayName": "of y source",
        "options": [
          "min",
          "centroid",
          "max"
        ],
        "hideWhen": "yAlignment == 0 || yAlignMode == 2"
      },
      "yAlignmentValue": {
        "type": "float",
        "default": 0,
        "displayName": "y value",
        "hideWhen": "yAlignMode < 2"
      },
      "yAlignmentOffset": {
        "type": "float",
        "default": 0,
        "displayName": "y offset",
        "hideWhen": "yAlignment == 0"
      },
      "zAlignment": {
        "type": "enum",
        "displayName": "z align target",
        "options": [
          "none",
          "min",
          "centroid",
          "max"
        ]
      },
      "zAlignMode": {
        "type": "enum",
        "displayName": "z source",
        "options": [
          "first connection or primitive",
          "average of all",
          "value"
        ],
        "hideWhen": "zAlignment == 0"
      },
      "zAlignmentTo": {
        "type": "enum",
        "displayName": "of z source",
        "options": [
          "min",
          "centroid",
          "max"
        ],
        "hideWhen": "zAlignment == 0 || zAlignMode == 2"
      },
      "zAlignmentValue": {
        "type": "float",
        "default": 0,
        "displayName": "z value",
        "hideWhen": "zAlignMode < 2"
      },
      "zAlignmentOffset": {
        "type": "float",
        "default": 0,
        "displayName": "z offset",
        "hideWhen": "zAlignment == 0"
      },
      "policyForFirst": {
        "type": "enum",
        "displayName": "first object",
        "options": [
          "keep position",
          "include in align",
          "delete"
        ],
        "description": "what to do with the first primitive/connection"
      }
    },
    "type": "Align",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "Mirror": {
    "name": "mirror",
    "alternateNames": [],
    "defaultNodeName": "mirror",
    "path": [
      "geometry",
      "transform"
    ],
    "help": "Mirrors geometry across a selected axis.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "axis": {
        "type": "enum",
        "options": [
          "x",
          "y",
          "z"
        ],
        "displayName": "axis"
      },
      "mode": {
        "type": "enum",
        "displayName": "mode",
        "options": [
          "around min",
          "around center",
          "around max",
          "around pivot value"
        ]
      },
      "pivot": {
        "type": "vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "pivot",
        "hideWhen": "mode < 3"
      },
      "keepOriginal": {
        "type": "boolean",
        "default": true,
        "displayName": "keep input geo"
      },
      "postProcess": {
        "type": "enum",
        "displayName": "combine result",
        "options": [
          "leave as is",
          "combine pairs of meshes",
          "combine all meshes"
        ],
        "hideWhen": "!keepOriginal"
      },
      "mask": {
        "type": "list:boolean",
        "displayName": "mask"
      }
    },
    "type": "Mirror",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "SmartSize": {
    "name": "smart size",
    "alternateNames": [],
    "defaultNodeName": "smart size",
    "path": [
      "geometry",
      "transform"
    ],
    "help": "Rescales geometry while preserving features.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "axis": {
        "type": "enum",
        "options": [
          "x",
          "y",
          "z"
        ],
        "displayName": "axis"
      },
      "size": {
        "type": "flexi:float",
        "default": 1000,
        "displayName": "size",
        "description": "intended size along the specified axis"
      },
      "resetSize": {
        "type": "button",
        "default": true,
        "displayName": "reset size",
        "description": "sets the size to the size of the incoming geometry (only if size has no incoming connection)"
      },
      "scaleAnchor": {
        "type": "enum",
        "displayName": "scale around",
        "options": [
          "min",
          "center",
          "max"
        ]
      },
      "preserveMin": {
        "type": "flexi:float",
        "minimum": 0,
        "maximum": 1,
        "default": 0.25,
        "displayName": "lower lock zone",
        "description": "proportion (0 to 1) of lower coordinate range to 'freeze'"
      },
      "preserveMax": {
        "type": "flexi:float",
        "minimum": 0,
        "maximum": 1,
        "default": 0.25,
        "displayName": "upper lock zone",
        "description": "proportion (0 to 1) of upper coordinate range to 'freeze'"
      },
      "mask": {
        "type": "list:boolean",
        "displayName": "mask"
      }
    },
    "type": "SmartSize",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "TransformPrimitives": {
    "name": "transform",
    "alternateNames": [
      "move",
      "rotate",
      "translate",
      "scale",
      "position",
      "size"
    ],
    "defaultNodeName": "transform",
    "path": [
      "geometry",
      "transform"
    ],
    "help": "Performs transformations on geometry.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry",
        "multigeo": true
      },
      "translate": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "translate"
      },
      "rotate": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "rotate"
      },
      "scale": {
        "type": "flexi:vector",
        "default": [
          1,
          1,
          1
        ],
        "displayName": "scale"
      },
      "centerPivot": {
        "type": "boolean",
        "default": true,
        "displayName": "center pivot"
      },
      "pivot": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "pivot",
        "hideWhen": "centerPivot"
      }
    },
    "type": "TransformPrimitives",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      },
      "translate": {
        "type": "list:vector",
        "displayName": "translate"
      },
      "rotate": {
        "type": "list:vector",
        "displayName": "rotate"
      },
      "scale": {
        "type": "list:vector",
        "displayName": "scale"
      }
    },
    "nodeClass": "node"
  },
  "ExtractUV": {
    "name": "get UV",
    "alternateNames": [
      "extract UVs"
    ],
    "defaultNodeName": "get UV",
    "path": [
      "geometry",
      "uv"
    ],
    "help": "Gets UVs from surface points",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "defaultU": {
        "type": "float",
        "description": "U value to output when none found on a point.",
        "displayName": "default U"
      },
      "defaultV": {
        "type": "float",
        "description": "V value to output when none found on a point.",
        "displayName": "default V"
      }
    },
    "type": "ExtractUV",
    "output": {
      "u": {
        "type": "list:float",
        "description": "u coordinates",
        "displayName": "u"
      },
      "v": {
        "type": "list:float",
        "description": "v coordinates",
        "displayName": "v"
      }
    },
    "nodeClass": "node"
  },
  "FlipUV": {
    "name": "flip UV",
    "alternateNames": [
      "swap",
      "reverse curve"
    ],
    "defaultNodeName": "flip UV",
    "path": [
      "geometry",
      "uv"
    ],
    "help": "Swaps or flips UV values of NURBS surfaces. Reverses curves (flip U).",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "mode": {
        "type": "enum",
        "options": [
          "no change",
          "flip U",
          "flip V",
          "flip U & V",
          "swap U & V"
        ],
        "displayName": "mode"
      },
      "mask": {
        "type": "list:boolean",
        "description": "A bit mask of primitives to delete.",
        "displayName": "mask"
      }
    },
    "type": "FlipUV",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "ProjectUV": {
    "name": "project UV",
    "alternateNames": [
      "texture"
    ],
    "defaultNodeName": "project UV",
    "path": [
      "geometry",
      "uv"
    ],
    "help": "Creates UV coordinates on a mesh by projecting along an axis.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry"
      },
      "axis": {
        "type": "enum",
        "options": [
          "X",
          "Y",
          "Z"
        ],
        "displayName": "projection axis"
      },
      "repeatU": {
        "type": "float",
        "default": 1,
        "displayName": "repeat U"
      },
      "repeatV": {
        "type": "float",
        "default": 1,
        "displayName": "repeat V"
      },
      "boundsMode": {
        "type": "enum",
        "displayName": "repeat bounds",
        "options": [
          "per object",
          "all objects"
        ]
      },
      "swapUV": {
        "type": "boolean",
        "default": false,
        "displayName": "swap U & V"
      },
      "flipU": {
        "type": "boolean",
        "default": false,
        "displayName": "flip U"
      },
      "flipV": {
        "type": "boolean",
        "default": false,
        "displayName": "flip V"
      }
    },
    "type": "ProjectUV",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    },
    "nodeClass": "node"
  },
  "ListLength": {
    "name": "list length",
    "alternateNames": [
      "count",
      "size"
    ],
    "defaultNodeName": "list length",
    "path": [
      "list"
    ],
    "help": "Calculates the number of items in a list.",
    "input": {
      "list": {
        "type": "list",
        "displayName": "list"
      }
    },
    "type": "ListLength",
    "output": {
      "length": {
        "type": "integer",
        "description": "length of the list",
        "displayName": "length"
      },
      "length minus one": {
        "type": "integer",
        "description": "length of the list, minus one",
        "displayName": "length minus one"
      }
    },
    "nodeClass": "list"
  },
  "ClampedList": {
    "name": "clamped number list",
    "alternateNames": [],
    "defaultNodeName": "clamped number list",
    "path": [
      "list",
      "number"
    ],
    "help": "Creates a clamped and spaced number list.",
    "input": {
      "list": {
        "type": "list:float",
        "displayName": "list"
      },
      "mode": {
        "type": "enum",
        "options": [
          "collapse out from index",
          "collapse up",
          "collapse down"
        ],
        "displayName": "mode"
      },
      "index": {
        "type": "integer",
        "default": 0,
        "displayName": "index"
      },
      "min": {
        "type": "float",
        "default": 0,
        "displayName": "minimum"
      },
      "max": {
        "type": "float",
        "default": 10,
        "displayName": "maximum"
      },
      "minSpacing": {
        "type": "float",
        "default": 0,
        "displayName": "minimum spacing"
      },
      "spaceBorders": {
        "type": "boolean",
        "default": true,
        "displayName": "pad borders",
        "description": "if true space is added between edge values and min or max"
      }
    },
    "type": "ClampedList",
    "output": {
      "list": {
        "type": "list:float",
        "description": "altered list",
        "displayName": "list"
      }
    },
    "nodeClass": "list"
  },
  "ClosestValue": {
    "name": "closest value",
    "alternateNames": [
      "nearest value",
      "distance",
      "delta",
      "difference"
    ],
    "defaultNodeName": "closest value",
    "path": [
      "list",
      "number"
    ],
    "help": "Finds closest value in number list.",
    "input": {
      "sourceValues": {
        "type": "flexi:float",
        "displayName": "source values",
        "description": "find closest values to these values amongst the target values"
      },
      "targetValues": {
        "type": "flexi:float",
        "displayName": "target values",
        "description": "find closest values to source values amongst these values"
      }
    },
    "type": "ClosestValue",
    "output": {
      "value": {
        "type": "float",
        "description": "closest value if no source list provided",
        "displayName": "value"
      },
      "value list": {
        "type": "list:float",
        "description": "closest values",
        "displayName": "value list"
      },
      "target indices": {
        "type": "list:integer",
        "description": "closest target values' indices",
        "displayName": "target indices"
      },
      "deltas": {
        "type": "list:float",
        "description": "value difference between source values to their nearest target values",
        "displayName": "deltas"
      }
    },
    "nodeClass": "list"
  },
  "CombineLists": {
    "name": "combine number lists",
    "alternateNames": [
      "append",
      "concatenate",
      "merge"
    ],
    "defaultNodeName": "combine number lists",
    "path": [
      "list",
      "number"
    ],
    "help": "Joins number lists.",
    "input": {
      "list1": {
        "type": "flexi:float",
        "displayName": "list 1"
      },
      "list2": {
        "type": "flexi:float",
        "displayName": "list 2"
      },
      "list3": {
        "type": "flexi:float",
        "displayName": "list 3"
      },
      "list4": {
        "type": "flexi:float",
        "displayName": "list 4"
      }
    },
    "type": "CombineLists",
    "output": {
      "list": {
        "type": "list:float",
        "description": "combined list",
        "displayName": "list"
      }
    },
    "nodeClass": "list"
  },
  "CullList": {
    "name": "cull number list",
    "alternateNames": [],
    "defaultNodeName": "cull number list",
    "path": [
      "list",
      "number"
    ],
    "help": "Cull a number list using a mask.",
    "input": {
      "list": {
        "type": "list:float",
        "displayName": "list"
      },
      "mask": {
        "type": "list:boolean",
        "displayName": "mask"
      }
    },
    "type": "CullList",
    "output": {
      "list": {
        "type": "list:float",
        "description": "culled list",
        "displayName": "list"
      },
      "reject list": {
        "type": "list:float",
        "description": "list of culled values",
        "displayName": "reject list"
      }
    },
    "nodeClass": "list"
  },
  "GetListItem": {
    "name": "get number list item",
    "alternateNames": [
      "switch",
      "choose",
      "pick",
      "choice",
      "list item"
    ],
    "defaultNodeName": "get number list item",
    "path": [
      "list",
      "number"
    ],
    "help": "Gets the value of an item in a number list.",
    "input": {
      "list": {
        "type": "list:float",
        "displayName": "list"
      },
      "index": {
        "type": "flexi:integer",
        "default": 0,
        "description": "an index, or list of indices",
        "displayName": "index"
      }
    },
    "type": "GetListItem",
    "output": {
      "value": {
        "type": "float",
        "displayName": "value"
      },
      "value as list": {
        "type": "list:float",
        "displayName": "value list"
      }
    },
    "nodeClass": "list"
  },
  "MatchNumberLists": {
    "name": "match number lists",
    "alternateNames": [],
    "defaultNodeName": "match number lists",
    "path": [
      "list",
      "number"
    ],
    "help": "Returns two lists of booleans, one for each input list (same length) - items are true if the number at their index is found in the other list.",
    "input": {
      "list1": {
        "type": "list:float",
        "displayName": "list 1"
      },
      "list2": {
        "type": "list:float",
        "displayName": "list 2"
      }
    },
    "type": "MatchNumberLists",
    "output": {
      "list1 matches": {
        "type": "list:boolean",
        "description": "list of booleans: true if number at this index in list 1 was found in list 2",
        "displayName": "list 1 matches"
      },
      "list2 matches": {
        "type": "list:boolean",
        "description": "list of booleans: true if number at this index in list 2 was found in list 1",
        "displayName": "list 2 matches"
      }
    },
    "nodeClass": "list"
  },
  "ReverseList": {
    "name": "reverse number list",
    "alternateNames": [],
    "defaultNodeName": "reverse number list",
    "path": [
      "list",
      "number"
    ],
    "help": "Reverses a number list.",
    "input": {
      "list": {
        "type": "list:float",
        "displayName": "list"
      }
    },
    "type": "ReverseList",
    "output": {
      "list": {
        "type": "list:float",
        "description": "reversed list",
        "displayName": "list"
      }
    },
    "nodeClass": "list"
  },
  "SetListItem": {
    "name": "set number list item",
    "alternateNames": [],
    "defaultNodeName": "set number list item",
    "path": [
      "list",
      "number"
    ],
    "help": "Sets an items value in a number list.",
    "input": {
      "list": {
        "type": "list:float",
        "displayName": "list"
      },
      "index": {
        "type": "integer",
        "default": 0,
        "displayName": "index"
      },
      "value": {
        "type": "float",
        "default": 0,
        "displayName": "value"
      }
    },
    "type": "SetListItem",
    "output": {
      "list": {
        "type": "list:float",
        "description": "edited list",
        "displayName": "list"
      }
    },
    "nodeClass": "list"
  },
  "SetListItems": {
    "name": "set number list items",
    "alternateNames": [],
    "defaultNodeName": "set number list items",
    "path": [
      "list",
      "number"
    ],
    "help": "Sets multiple item values in a number list.",
    "input": {
      "list": {
        "type": "list:float",
        "displayName": "list"
      },
      "indexList": {
        "type": "list:integer",
        "displayName": "indexList"
      },
      "values": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "values"
      }
    },
    "type": "SetListItems",
    "output": {
      "list": {
        "type": "list:float",
        "description": "edited list",
        "displayName": "list"
      }
    },
    "nodeClass": "list"
  },
  "ShiftList": {
    "name": "shift number list",
    "alternateNames": [],
    "defaultNodeName": "shift number list",
    "path": [
      "list",
      "number"
    ],
    "help": "Shifts the items of a number list.",
    "input": {
      "list": {
        "type": "list:float",
        "displayName": "list"
      },
      "shift": {
        "type": "integer",
        "default": 0,
        "displayName": "shift"
      }
    },
    "type": "ShiftList",
    "output": {
      "list": {
        "type": "list:float",
        "description": "shifted list",
        "displayName": "list"
      }
    },
    "nodeClass": "list"
  },
  "ShuffleList": {
    "name": "shuffle number list",
    "alternateNames": [
      "randomize",
      "randomise"
    ],
    "defaultNodeName": "shuffle number list",
    "path": [
      "list",
      "number"
    ],
    "help": "Shuffles the items of a number list.",
    "input": {
      "list": {
        "type": "list:float",
        "displayName": "list"
      }
    },
    "type": "ShuffleList",
    "output": {
      "list": {
        "type": "list:float",
        "description": "shuffled list",
        "displayName": "list"
      }
    },
    "nodeClass": "list"
  },
  "SortFloatList": {
    "name": "sort number list",
    "alternateNames": [],
    "defaultNodeName": "sort number list",
    "path": [
      "list",
      "number"
    ],
    "help": "Sorts the values of a number list.",
    "input": {
      "list": {
        "type": "list:float",
        "displayName": "list"
      },
      "value": {
        "type": "float",
        "default": 0,
        "description": "return the closest value to this one, above and below in the list",
        "displayName": "near value"
      }
    },
    "type": "SortFloatList",
    "output": {
      "sorted list": {
        "type": "list:float",
        "description": "sorted list of numbers",
        "displayName": "sorted list"
      },
      "original indexes": {
        "type": "list:integer",
        "description": "map from new to old indices",
        "displayName": "original indexes"
      },
      "reverse indexes": {
        "type": "list:integer",
        "description": "map from old to new indices",
        "displayName": "reverse indexes"
      },
      "value below": {
        "type": "float",
        "description": "value in the list closest below given value",
        "displayName": "value below"
      },
      "value above": {
        "type": "float",
        "description": "value in the list closest above given value",
        "displayName": "value above"
      },
      "below index": {
        "type": "integer",
        "description": "index in the original list, of the 'below' value;  -1 if value < lowest list value",
        "displayName": "below index"
      },
      "above index": {
        "type": "integer",
        "description": "index in the original list, of the 'below' value;  -1 if value > highest list value",
        "displayName": "above index"
      }
    },
    "nodeClass": "list"
  },
  "CombineStringLists": {
    "name": "combine string lists",
    "alternateNames": [
      "append",
      "concatenate",
      "merge"
    ],
    "defaultNodeName": "combine string lists",
    "path": [
      "list",
      "string"
    ],
    "help": "Joins string list.",
    "input": {
      "list1": {
        "type": "flexi:string",
        "displayName": "list 1"
      },
      "list2": {
        "type": "flexi:string",
        "displayName": "list 2"
      },
      "list3": {
        "type": "flexi:string",
        "displayName": "list 3"
      },
      "list4": {
        "type": "flexi:string",
        "displayName": "list 4"
      }
    },
    "type": "CombineStringLists",
    "output": {
      "list": {
        "type": "list:string",
        "description": "combined list",
        "displayName": "list"
      }
    },
    "nodeClass": "string"
  },
  "CullStringList": {
    "name": "cull string list",
    "alternateNames": [],
    "defaultNodeName": "cull string list",
    "path": [
      "list",
      "string"
    ],
    "help": "Culls a string list using a mask.",
    "input": {
      "list": {
        "type": "list:string",
        "displayName": "list"
      },
      "mask": {
        "type": "list:boolean",
        "displayName": "mask"
      }
    },
    "type": "CullStringList",
    "output": {
      "list": {
        "type": "list:string",
        "description": "culled list",
        "displayName": "list"
      },
      "reject list": {
        "type": "list:string",
        "description": "list of culled values",
        "displayName": "reject list"
      }
    },
    "nodeClass": "list"
  },
  "FindInStringList": {
    "name": "find in string list",
    "alternateNames": [
      "search",
      "compare"
    ],
    "defaultNodeName": "find in string list",
    "path": [
      "list",
      "string"
    ],
    "help": "Searches for a string in string list.",
    "input": {
      "list": {
        "type": "list:string",
        "displayName": "list"
      },
      "searchString": {
        "type": "string",
        "default": "waldo",
        "displayName": "search string"
      },
      "indexOffset": {
        "type": "integer",
        "default": 0,
        "displayName": "index offset",
        "description": "offset output indices by this value"
      }
    },
    "type": "FindInStringList",
    "output": {
      "found": {
        "type": "boolean",
        "description": "this value is true if the search string has been found",
        "displayName": "found"
      },
      "first hit index": {
        "type": "integer",
        "description": "index (with offset) of the first search hit",
        "displayName": "first hit index"
      },
      "all hit indices": {
        "type": "list:integer",
        "description": "list of indices (with offset) of search hits",
        "displayName": "all hit indices"
      }
    },
    "nodeClass": "string"
  },
  "GetStringListItem": {
    "name": "get string list item",
    "alternateNames": [
      "switch",
      "choose",
      "pick",
      "choice",
      "list item"
    ],
    "defaultNodeName": "get string list item",
    "path": [
      "list",
      "string"
    ],
    "help": "Gets a string from string list using an index value.",
    "input": {
      "list": {
        "type": "list:string",
        "displayName": "list"
      },
      "index": {
        "type": "flexi:integer",
        "default": 0,
        "description": "an index, or list of indices",
        "displayName": "index"
      }
    },
    "type": "GetStringListItem",
    "output": {
      "string": {
        "type": "string",
        "displayName": "string"
      },
      "string as list": {
        "type": "list:string",
        "displayName": "string as list"
      }
    },
    "nodeClass": "string"
  },
  "ReverseStringList": {
    "name": "reverse string list",
    "alternateNames": [],
    "defaultNodeName": "reverse string list",
    "path": [
      "list",
      "string"
    ],
    "help": "Reverses a string list.",
    "input": {
      "list": {
        "type": "list:string",
        "displayName": "list"
      }
    },
    "type": "ReverseStringList",
    "output": {
      "list": {
        "type": "list:string",
        "description": "reversed list",
        "displayName": "list"
      }
    },
    "nodeClass": "list"
  },
  "SetStringListItem": {
    "name": "set string list item",
    "alternateNames": [],
    "defaultNodeName": "set string list item",
    "path": [
      "list",
      "string"
    ],
    "help": "Sets a string's value in a string list.",
    "input": {
      "list": {
        "type": "list:string",
        "displayName": "list"
      },
      "index": {
        "type": "integer",
        "default": 0,
        "displayName": "index"
      },
      "text": {
        "type": "string",
        "default": "",
        "displayName": "text"
      }
    },
    "type": "SetStringListItem",
    "output": {
      "list": {
        "type": "list:string",
        "description": "edited list",
        "displayName": "list"
      }
    },
    "nodeClass": "string"
  },
  "StringListToString": {
    "name": "string list to string",
    "alternateNames": [
      "concatenate",
      "join string"
    ],
    "defaultNodeName": "string list to string",
    "path": [
      "list",
      "string"
    ],
    "help": "Concatenates a string list to a string.",
    "input": {
      "list": {
        "type": "list:string",
        "displayName": "list"
      },
      "separator": {
        "type": "string",
        "default": ",",
        "displayName": "separator"
      }
    },
    "type": "StringListToString",
    "output": {
      "string": {
        "type": "string",
        "displayName": "string"
      }
    },
    "nodeClass": "string"
  },
  "CombineVectorLists": {
    "name": "combine vector lists",
    "alternateNames": [
      "append",
      "concatenate",
      "merge"
    ],
    "defaultNodeName": "combine vector lists",
    "path": [
      "list",
      "vector"
    ],
    "help": "Joins vector lists.",
    "input": {
      "list1": {
        "type": "flexi:vector",
        "displayName": "list 1"
      },
      "list2": {
        "type": "flexi:vector",
        "displayName": "list 2"
      },
      "list3": {
        "type": "flexi:vector",
        "displayName": "list 3"
      },
      "list4": {
        "type": "flexi:vector",
        "displayName": "list 4"
      }
    },
    "type": "CombineVectorLists",
    "output": {
      "list": {
        "type": "list:vector",
        "description": "combined list",
        "displayName": "list"
      }
    },
    "nodeClass": "list"
  },
  "CullVectorList": {
    "name": "cull vector list",
    "alternateNames": [],
    "defaultNodeName": "cull vector list",
    "path": [
      "list",
      "vector"
    ],
    "help": "Culls a vector list using a mask.",
    "input": {
      "list": {
        "type": "list:vector",
        "displayName": "list"
      },
      "mask": {
        "type": "list:boolean",
        "displayName": "mask"
      }
    },
    "type": "CullVectorList",
    "output": {
      "list": {
        "type": "list:vector",
        "description": "culled list",
        "displayName": "list"
      },
      "reject list": {
        "type": "list:vector",
        "description": "list of culled values",
        "displayName": "reject list"
      }
    },
    "nodeClass": "list"
  },
  "GetVectorListItem": {
    "name": "get vector list item",
    "alternateNames": [
      "switch",
      "choose",
      "pick",
      "choice",
      "list item"
    ],
    "defaultNodeName": "get vector list item",
    "path": [
      "list",
      "vector"
    ],
    "help": "Gets a vector item from a vector list using an index value.",
    "input": {
      "list": {
        "type": "list:vector",
        "displayName": "list"
      },
      "index": {
        "type": "flexi:integer",
        "default": 0,
        "description": "an index, or list of indices",
        "displayName": "index"
      },
      "errorMode": {
        "type": "enum",
        "options": [
          "error this node",
          "output default vector"
        ],
        "displayName": "errorMode"
      },
      "defaultVector": {
        "type": "vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "default vector"
      }
    },
    "type": "GetVectorListItem",
    "output": {
      "vector": {
        "type": "vector",
        "displayName": "vector"
      },
      "x": {
        "type": "float",
        "displayName": "x"
      },
      "y": {
        "type": "float",
        "displayName": "y"
      },
      "z": {
        "type": "float",
        "displayName": "z"
      },
      "vector as list": {
        "type": "list:vector",
        "displayName": "vector list"
      },
      "x as list": {
        "type": "list:float",
        "displayName": "x list"
      },
      "y as list": {
        "type": "list:float",
        "displayName": "y list"
      },
      "z as list": {
        "type": "list:float",
        "displayName": "z list"
      }
    },
    "nodeClass": "list"
  },
  "ReverseVectorList": {
    "name": "reverse vector list",
    "alternateNames": [],
    "defaultNodeName": "reverse vector list",
    "path": [
      "list",
      "vector"
    ],
    "help": "Reverses a vector list.",
    "input": {
      "list": {
        "type": "list:vector",
        "displayName": "list"
      }
    },
    "type": "ReverseVectorList",
    "output": {
      "list": {
        "type": "list:vector",
        "description": "reversed list",
        "displayName": "list"
      }
    },
    "nodeClass": "list"
  },
  "SetVectorListItem": {
    "name": "set vector list item",
    "alternateNames": [],
    "defaultNodeName": "set vector list item",
    "path": [
      "list",
      "vector"
    ],
    "help": "Sets the value of a vector in a vector list.",
    "input": {
      "list": {
        "type": "list:vector",
        "displayName": "list"
      },
      "index": {
        "type": "integer",
        "default": 0,
        "displayName": "index"
      },
      "value": {
        "type": "vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "value"
      }
    },
    "type": "SetVectorListItem",
    "output": {
      "list": {
        "type": "list:vector",
        "description": "edited list",
        "displayName": "list"
      }
    },
    "nodeClass": "list"
  },
  "SetVectorListItems": {
    "name": "set vector list items",
    "alternateNames": [],
    "defaultNodeName": "set vector list items",
    "path": [
      "list",
      "vector"
    ],
    "help": "Sets the values of vectors in a vector list.",
    "input": {
      "list": {
        "type": "list:vector",
        "displayName": "list"
      },
      "indexList": {
        "type": "list:integer",
        "displayName": "indexList"
      },
      "values": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "values"
      }
    },
    "type": "SetVectorListItems",
    "output": {
      "list": {
        "type": "list:vector",
        "description": "edited list",
        "displayName": "list"
      }
    },
    "nodeClass": "list"
  },
  "ShiftVectorList": {
    "name": "shift vector list",
    "alternateNames": [],
    "defaultNodeName": "shift vector list",
    "path": [
      "list",
      "vector"
    ],
    "help": "Shifts a vector list.",
    "input": {
      "list": {
        "type": "list:vector",
        "displayName": "list"
      },
      "shift": {
        "type": "integer",
        "default": 0,
        "displayName": "shift"
      }
    },
    "type": "ShiftVectorList",
    "output": {
      "vector list": {
        "type": "list:vector",
        "description": "shifted list",
        "displayName": "vector list"
      },
      "x list": {
        "type": "list:float",
        "description": "x components of shifted list",
        "displayName": "x list"
      },
      "y list": {
        "type": "list:float",
        "description": "y components of shifted list",
        "displayName": "y list"
      },
      "z list": {
        "type": "list:float",
        "description": "z components of shifted list",
        "displayName": "z list"
      }
    },
    "nodeClass": "list"
  },
  "ShuffleVectorList": {
    "name": "shuffle vector list",
    "alternateNames": [
      "randomize",
      "randomise"
    ],
    "defaultNodeName": "shuffle vector list",
    "path": [
      "list",
      "vector"
    ],
    "help": "Shuffles a vector list.",
    "input": {
      "list": {
        "type": "list:vector",
        "displayName": "list"
      }
    },
    "type": "ShuffleVectorList",
    "output": {
      "list": {
        "type": "list:vector",
        "description": "shuffled list",
        "displayName": "list"
      }
    },
    "nodeClass": "list"
  },
  "ExpressionParser": {
    "name": "expression",
    "alternateNames": [],
    "defaultNodeName": "expression",
    "path": [
      "math"
    ],
    "help": "Calculates the results of the written expression.",
    "input": {
      "expression": {
        "type": "string",
        "default": "sin(a)",
        "description": "+, -, *, /, \\, %, >, <, =>, =<, ==, =!, &&, ||, &, |, =^, **, ?:, min, max, sin, cos, tan, asin, acos, atan, atan2, sinh, cosh, tanh, round, ceil, floor, trunc, sqrt, pow, exp, log, log10, abs, sign",
        "displayName": "expression"
      },
      "a": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "a"
      },
      "b": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "b"
      },
      "c": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "c"
      },
      "d": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "d"
      },
      "x": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "x"
      },
      "y": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "y"
      },
      "z": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "z"
      },
      "w": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "w"
      }
    },
    "type": "ExpressionParser",
    "output": {
      "result": {
        "type": "float",
        "displayName": "result"
      },
      "result list": {
        "type": "list:float",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "Formula": {
    "deprecated": {
      "supersededBy": "ExpressionParser",
      "deprecationHelpString": "This is a duplicate of the expression node, and is now unneeded."
    },
    "name": "formula",
    "alternateNames": [],
    "defaultNodeName": "formula",
    "path": [
      "math"
    ],
    "help": "Calculates the results of the written expression.",
    "input": {
      "expression": {
        "type": "string",
        "default": "sin(a)",
        "description": "+, -, *, /, \\, %, >, <, =>, =<, ==, =!, &&, ||, &, |, =^, **, ?:, min, max, sin, cos, tan, asin, acos, atan, atan2, sinh, cosh, tanh, round, ceil, floor, trunc, sqrt, pow, exp, log, log10, abs, sign",
        "displayName": "expression"
      },
      "formula": {
        "type": "string",
        "default": "",
        "description": "This input is unused by the engine. Clients may wish to store unparsed expressions here.",
        "displayName": "formula"
      },
      "a": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "a"
      },
      "b": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "b"
      },
      "c": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "c"
      },
      "d": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "d"
      },
      "e": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "e"
      },
      "f": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "f"
      },
      "g": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "g"
      },
      "h": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "h"
      },
      "i": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "i"
      },
      "j": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "j"
      },
      "k": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "k"
      },
      "l": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "l"
      },
      "x": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "x"
      },
      "y": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "y"
      },
      "z": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "z"
      },
      "w": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "w"
      }
    },
    "type": "Formula",
    "output": {
      "result": {
        "type": "float",
        "displayName": "result"
      },
      "result list": {
        "type": "list:float",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "Abs": {
    "name": "absolute value",
    "alternateNames": [],
    "defaultNodeName": "absolute value",
    "path": [
      "math",
      "basic"
    ],
    "help": "Takes the absolute of a value.",
    "input": {
      "value": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value"
      }
    },
    "type": "Abs",
    "output": {
      "result": {
        "type": "float",
        "displayName": "result"
      },
      "result list": {
        "type": "list:float",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "Add": {
    "name": "add",
    "alternateNames": [
      "sum",
      "addition",
      "+",
      "plus"
    ],
    "defaultNodeName": "add",
    "path": [
      "math",
      "basic"
    ],
    "help": "Sums values.",
    "input": {
      "value1": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value 1"
      },
      "value2": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value 2"
      },
      "value3": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value 3"
      },
      "value4": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value 4"
      }
    },
    "type": "Add",
    "output": {
      "result": {
        "type": "float",
        "displayName": "result"
      },
      "result list": {
        "type": "list:float",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "Divide": {
    "name": "divide",
    "alternateNames": [
      "/"
    ],
    "defaultNodeName": "divide",
    "path": [
      "math",
      "basic"
    ],
    "help": "Divides a value by another value.",
    "input": {
      "value1": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value 1"
      },
      "value2": {
        "type": "flexi:float",
        "default": 1,
        "displayName": "value 2"
      }
    },
    "type": "Divide",
    "output": {
      "result": {
        "type": "float",
        "displayName": "result"
      },
      "result list": {
        "type": "list:float",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "Modulo": {
    "name": "modulo",
    "alternateNames": [
      "%"
    ],
    "defaultNodeName": "modulo",
    "path": [
      "math",
      "basic"
    ],
    "help": "Finds the remainder of a value divided by another value.",
    "input": {
      "value1": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value 1"
      },
      "value2": {
        "type": "flexi:float",
        "default": 1,
        "displayName": "value 2"
      }
    },
    "type": "Modulo",
    "output": {
      "result": {
        "type": "float",
        "displayName": "result"
      },
      "result list": {
        "type": "list:float",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "Multiply": {
    "name": "multiply",
    "alternateNames": [
      "*"
    ],
    "defaultNodeName": "multiply",
    "path": [
      "math",
      "basic"
    ],
    "help": "Multiplies values.",
    "input": {
      "value1": {
        "type": "flexi:float",
        "default": 1,
        "displayName": "value 1"
      },
      "value2": {
        "type": "flexi:float",
        "default": 1,
        "displayName": "value 2"
      },
      "value3": {
        "type": "flexi:float",
        "default": 1,
        "displayName": "value3"
      },
      "value4": {
        "type": "flexi:float",
        "default": 1,
        "displayName": "value4"
      }
    },
    "type": "Multiply",
    "output": {
      "result": {
        "type": "float",
        "displayName": "result"
      },
      "result list": {
        "type": "list:float",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "Power": {
    "name": "power",
    "alternateNames": [
      "^"
    ],
    "defaultNodeName": "power",
    "path": [
      "math",
      "basic"
    ],
    "help": "Calculates a value to the power of another value.",
    "input": {
      "value1": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value 1"
      },
      "value2": {
        "type": "flexi:float",
        "default": 1,
        "displayName": "value 2"
      }
    },
    "type": "Power",
    "output": {
      "result": {
        "type": "float",
        "displayName": "result"
      },
      "result list": {
        "type": "list:float",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "SquareRoot": {
    "name": "square root",
    "alternateNames": [],
    "defaultNodeName": "square root",
    "path": [
      "math",
      "basic"
    ],
    "help": "Calculates the square root of a value.",
    "input": {
      "value": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value"
      }
    },
    "type": "SquareRoot",
    "output": {
      "result": {
        "type": "float",
        "displayName": "result"
      },
      "result list": {
        "type": "list:float",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "Subtract": {
    "name": "subtract",
    "alternateNames": [
      "minus",
      "-"
    ],
    "defaultNodeName": "subtract",
    "path": [
      "math",
      "basic"
    ],
    "help": "Subtracts a value from another value.",
    "input": {
      "value1": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value 1"
      },
      "value2": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value 2"
      }
    },
    "type": "Subtract",
    "output": {
      "result": {
        "type": "float",
        "displayName": "result"
      },
      "result list": {
        "type": "list:float",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "Clamp": {
    "name": "clamp",
    "alternateNames": [],
    "defaultNodeName": "clamp",
    "path": [
      "math",
      "clamp"
    ],
    "help": "Clamps a value between a minimum and a maximum.",
    "input": {
      "value": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value"
      },
      "min": {
        "type": "float",
        "default": 0,
        "displayName": "min"
      },
      "max": {
        "type": "float",
        "default": 1,
        "displayName": "max"
      }
    },
    "type": "Clamp",
    "output": {
      "result": {
        "type": "float",
        "displayName": "result"
      },
      "result list": {
        "type": "list:float",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "Max": {
    "name": "maximum",
    "alternateNames": [],
    "defaultNodeName": "maximum",
    "path": [
      "math",
      "clamp"
    ],
    "help": "Finds the maximum value amongst inputs.",
    "input": {
      "value1": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value 1"
      },
      "value2": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value 2"
      }
    },
    "type": "Max",
    "output": {
      "result": {
        "type": "float",
        "displayName": "result"
      },
      "result list": {
        "type": "list:float",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "Min": {
    "name": "minimum",
    "alternateNames": [],
    "defaultNodeName": "minimum",
    "path": [
      "math",
      "clamp"
    ],
    "help": "Finds the minimum value amongst inputs.",
    "input": {
      "value1": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value 1"
      },
      "value2": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value 2"
      }
    },
    "type": "Min",
    "output": {
      "result": {
        "type": "float",
        "displayName": "result"
      },
      "result list": {
        "type": "list:float",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "Equal": {
    "name": "equal",
    "alternateNames": [
      "same",
      "identical",
      "is",
      "=",
      "=="
    ],
    "defaultNodeName": "equal",
    "path": [
      "math",
      "compare"
    ],
    "help": "Checks whether values are (almost) equal.",
    "input": {
      "value1": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value 1"
      },
      "value2": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value 2"
      },
      "tolerance": {
        "type": "float",
        "default": 0,
        "displayName": "tolerance"
      }
    },
    "type": "Equal",
    "output": {
      "result": {
        "type": "boolean",
        "displayName": "result"
      },
      "result list": {
        "type": "list:boolean",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "EqualVectors": {
    "name": "equal vectors",
    "alternateNames": [
      "same",
      "identical",
      "is",
      "=",
      "=="
    ],
    "defaultNodeName": "equal vectors",
    "path": [
      "math",
      "compare"
    ],
    "help": "Checks whether values are (almost) equal.",
    "input": {
      "vector1": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "vector 1"
      },
      "vector2": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "vector 2"
      }
    },
    "type": "EqualVectors",
    "output": {
      "result": {
        "type": "boolean",
        "displayName": "result"
      },
      "result list": {
        "type": "list:boolean",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "Greater": {
    "name": "greater",
    "alternateNames": [
      "more",
      "bigger",
      ">"
    ],
    "defaultNodeName": "greater",
    "path": [
      "math",
      "compare"
    ],
    "help": "Checks whether a value is greater than another value.",
    "input": {
      "value1": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value 1"
      },
      "value2": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value 2"
      }
    },
    "type": "Greater",
    "output": {
      "result": {
        "type": "boolean",
        "displayName": "result"
      },
      "result list": {
        "type": "list:boolean",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "Less": {
    "name": "less",
    "alternateNames": [
      "less",
      "smaller",
      "<"
    ],
    "defaultNodeName": "less",
    "path": [
      "math",
      "compare"
    ],
    "help": "Checks whether a value is less than another value.",
    "input": {
      "value1": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value 1"
      },
      "value2": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value 2"
      }
    },
    "type": "Less",
    "output": {
      "result": {
        "type": "boolean",
        "displayName": "result"
      },
      "result list": {
        "type": "list:boolean",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "And": {
    "name": "and",
    "alternateNames": [
      "&",
      "&&"
    ],
    "defaultNodeName": "and",
    "path": [
      "math",
      "logic"
    ],
    "help": "Checks whether all inputs are true.",
    "input": {
      "value1": {
        "type": "flexi:boolean",
        "default": true,
        "displayName": "value 1"
      },
      "value2": {
        "type": "flexi:boolean",
        "default": true,
        "displayName": "value 2"
      },
      "value3": {
        "type": "flexi:boolean",
        "default": true,
        "displayName": "value 3"
      },
      "value4": {
        "type": "flexi:boolean",
        "default": true,
        "displayName": "value 4"
      }
    },
    "type": "And",
    "output": {
      "result": {
        "type": "boolean",
        "displayName": "result"
      },
      "result list": {
        "type": "list:boolean",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "Not": {
    "name": "not",
    "alternateNames": [
      "!"
    ],
    "defaultNodeName": "not",
    "path": [
      "math",
      "logic"
    ],
    "help": "Negates the input.",
    "input": {
      "value": {
        "type": "flexi:boolean",
        "default": false,
        "displayName": "value"
      }
    },
    "type": "Not",
    "output": {
      "result": {
        "type": "boolean",
        "displayName": "result"
      },
      "result list": {
        "type": "list:boolean",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "Or": {
    "name": "or",
    "alternateNames": [
      "||"
    ],
    "defaultNodeName": "or",
    "path": [
      "math",
      "logic"
    ],
    "help": "Checks whether any of the input values are true.",
    "input": {
      "value1": {
        "type": "flexi:boolean",
        "default": false,
        "displayName": "value 1"
      },
      "value2": {
        "type": "flexi:boolean",
        "default": false,
        "displayName": "value 2"
      },
      "value3": {
        "type": "flexi:boolean",
        "default": false,
        "displayName": "value 3"
      },
      "value4": {
        "type": "flexi:boolean",
        "default": false,
        "displayName": "value 4"
      }
    },
    "type": "Or",
    "output": {
      "result": {
        "type": "boolean",
        "displayName": "result"
      },
      "result list": {
        "type": "list:boolean",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "Ease": {
    "name": "ease",
    "alternateNames": [
      "animation",
      "animate",
      "interpolate",
      "ramp",
      "gradient"
    ],
    "defaultNodeName": "ease",
    "path": [
      "math",
      "mapping"
    ],
    "help": "Performs an ease function on 0->1 input values.",
    "input": {
      "t": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value"
      },
      "function": {
        "type": "enum",
        "options": [
          "Linear",
          "QuadraticIn",
          "QuadraticOut",
          "QuadraticInOut",
          "CubicIn",
          "CubicOut",
          "CubicInOut",
          "QuarticIn",
          "QuarticOut",
          "QuarticInOut",
          "QuinticIn",
          "QuinticOut",
          "QuinticInOut",
          "SinusoidalIn",
          "SinusoidalOut",
          "SinusoidalInOut",
          "ExponentialIn",
          "ExponentialOut",
          "ExponentialInOut",
          "CircularIn",
          "CircularOut",
          "CircularInOut",
          "ElasticIn",
          "ElasticOut",
          "ElasticInOut",
          "BackIn",
          "BackOut",
          "BackInOut",
          "BounceIn",
          "BounceOut",
          "BounceInOut"
        ],
        "displayName": "function"
      },
      "repeatMode": {
        "type": "enum",
        "options": [
          "clamp",
          "repeat",
          "swing"
        ],
        "displayName": "repeat mode"
      }
    },
    "type": "Ease",
    "output": {
      "result": {
        "type": "float",
        "displayName": "result"
      },
      "result list": {
        "type": "list:float",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "Range": {
    "name": "range",
    "alternateNames": [
      "remap",
      "lerp"
    ],
    "defaultNodeName": "range",
    "path": [
      "math",
      "mapping"
    ],
    "help": "Remaps values of a given range to a new range.",
    "input": {
      "value": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value"
      },
      "min": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "minimum in"
      },
      "max": {
        "type": "flexi:float",
        "default": 1,
        "displayName": "maximum in"
      },
      "minOut": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "minimum out"
      },
      "maxOut": {
        "type": "flexi:float",
        "default": 1,
        "displayName": "maximum out"
      }
    },
    "type": "Range",
    "output": {
      "result": {
        "type": "float",
        "displayName": "result"
      },
      "result list": {
        "type": "list:float",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "RandomFloat": {
    "name": "random number",
    "alternateNames": [
      "float",
      "rand"
    ],
    "defaultNodeName": "random number",
    "path": [
      "math",
      "random"
    ],
    "help": "Creates random value/s between 0 and 1.",
    "input": {
      "useSeed": {
        "type": "boolean",
        "default": true,
        "displayName": "use seed"
      },
      "seed": {
        "type": "integer",
        "default": 0,
        "displayName": "seed",
        "hideWhen": "!useSeed"
      },
      "size": {
        "type": "integer",
        "default": 1,
        "minimum": 1,
        "displayName": "#",
        "description": "# of numbers to output"
      }
    },
    "type": "RandomFloat",
    "output": {
      "result": {
        "type": "float",
        "displayName": "result"
      },
      "result list": {
        "type": "list:float",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "RandomVector": {
    "name": "random vector",
    "alternateNames": [],
    "defaultNodeName": "random vector",
    "path": [
      "math",
      "random"
    ],
    "help": "Creates random vector value/s.",
    "input": {
      "spherical": {
        "type": "boolean",
        "default": false,
        "displayName": "spherical"
      },
      "positive": {
        "type": "boolean",
        "default": false,
        "displayName": "positive values"
      },
      "useSeed": {
        "type": "boolean",
        "default": true,
        "displayName": "use seed",
        "hideWhen": "spherical"
      },
      "seed": {
        "type": "integer",
        "default": 0,
        "displayName": "seed",
        "hideWhen": "!useSeed || spherical"
      },
      "size": {
        "type": "integer",
        "default": 1,
        "minimum": 1,
        "displayName": "#",
        "description": "# of vectors to output"
      }
    },
    "type": "RandomVector",
    "output": {
      "result": {
        "type": "vector",
        "displayName": "result"
      },
      "result list": {
        "type": "list:vector",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "SimplexNoise": {
    "name": "noise",
    "alternateNames": [
      "simplex"
    ],
    "defaultNodeName": "noise",
    "path": [
      "math",
      "random"
    ],
    "help": "Outputs a simplex noise based on input points.",
    "input": {
      "vectors": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "vectors"
      },
      "time": {
        "type": "float",
        "default": 1.234,
        "displayName": "time"
      }
    },
    "type": "SimplexNoise",
    "output": {
      "result": {
        "type": "float",
        "description": "result",
        "displayName": "result"
      },
      "result list": {
        "type": "list:float",
        "displayName": "result list"
      }
    },
    "nodeClass": "value"
  },
  "Ceiling": {
    "name": "ceiling",
    "alternateNames": [
      "roof"
    ],
    "defaultNodeName": "ceiling",
    "path": [
      "math",
      "round"
    ],
    "help": "Rounds up to the nearest integer.",
    "input": {
      "value": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value"
      }
    },
    "type": "Ceiling",
    "output": {
      "result": {
        "type": "integer",
        "displayName": "result"
      },
      "result list": {
        "type": "list:integer",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "Floor": {
    "name": "floor",
    "alternateNames": [],
    "defaultNodeName": "floor",
    "path": [
      "math",
      "round"
    ],
    "help": "Rounds down to the nearest integer.",
    "input": {
      "value": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value"
      }
    },
    "type": "Floor",
    "output": {
      "result": {
        "type": "integer",
        "displayName": "result"
      },
      "result list": {
        "type": "list:integer",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "Round": {
    "name": "round",
    "alternateNames": [],
    "defaultNodeName": "round",
    "path": [
      "math",
      "round"
    ],
    "help": "Rounds to the nearest integer.",
    "input": {
      "value": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value"
      }
    },
    "type": "Round",
    "output": {
      "result": {
        "type": "integer",
        "displayName": "result"
      },
      "result list": {
        "type": "list:integer",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "FloatSwitch": {
    "name": "number switch",
    "alternateNames": [
      "case",
      "if",
      "value switch"
    ],
    "defaultNodeName": "number switch",
    "path": [
      "math",
      "switch"
    ],
    "help": "Switches between number inputs using an index.",
    "input": {
      "index": {
        "type": "integer",
        "default": 0,
        "displayName": "index"
      },
      "value0": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value 0"
      },
      "value1": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value 1"
      },
      "value2": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value 2"
      },
      "value3": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value 3"
      }
    },
    "type": "FloatSwitch",
    "output": {
      "value": {
        "type": "float",
        "displayName": "value"
      },
      "value as list": {
        "type": "list:float",
        "displayName": "value as list"
      }
    },
    "nodeClass": "math"
  },
  "StringSwitch": {
    "name": "string switch",
    "alternateNames": [
      "case",
      "if"
    ],
    "defaultNodeName": "string switch",
    "path": [
      "string"
    ],
    "help": "Switches between string inputs using an index.",
    "input": {
      "index": {
        "type": "integer",
        "default": 0,
        "displayName": "index"
      },
      "string0": {
        "type": "flexi:string",
        "default": "A",
        "displayName": "string 1"
      },
      "string1": {
        "type": "flexi:string",
        "default": "B",
        "displayName": "string 2"
      },
      "string2": {
        "type": "flexi:string",
        "default": "C",
        "displayName": "string 3"
      },
      "string3": {
        "type": "flexi:string",
        "default": "D",
        "displayName": "string 4"
      }
    },
    "type": "StringSwitch",
    "output": {
      "string": {
        "type": "string",
        "displayName": "string"
      },
      "string list": {
        "type": "list:string",
        "displayName": "string list"
      }
    },
    "nodeClass": "string"
  },
  "VectorSwitch": {
    "name": "vector switch",
    "alternateNames": [
      "case",
      "if"
    ],
    "defaultNodeName": "vector switch",
    "path": [
      "math",
      "switch"
    ],
    "help": "Switches between vector inputs using an index.",
    "input": {
      "index": {
        "type": "integer",
        "displayName": "index"
      },
      "vector0": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "vector 0"
      },
      "vector1": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "vector 1"
      },
      "vector2": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "vector 2"
      },
      "vector3": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "vector 3"
      }
    },
    "type": "VectorSwitch",
    "output": {
      "vector": {
        "type": "vector",
        "displayName": "vector"
      },
      "x": {
        "type": "float",
        "displayName": "x"
      },
      "y": {
        "type": "float",
        "displayName": "y"
      },
      "z": {
        "type": "float",
        "displayName": "z"
      },
      "vector list": {
        "type": "list:vector",
        "displayName": "vector list"
      },
      "x list": {
        "type": "list:float",
        "displayName": "x list"
      },
      "y list": {
        "type": "list:float",
        "displayName": "y list"
      },
      "z list": {
        "type": "list:float",
        "displayName": "z list"
      }
    },
    "nodeClass": "math"
  },
  "Acos": {
    "name": "arc cosine",
    "alternateNames": [
      "acos",
      "arc cosinus"
    ],
    "defaultNodeName": "arc cosine",
    "path": [
      "math",
      "trigonometry"
    ],
    "help": "Performs an arc cosine function on a value.",
    "input": {
      "value": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value"
      }
    },
    "type": "Acos",
    "output": {
      "result": {
        "type": "float",
        "displayName": "result"
      },
      "result list": {
        "type": "list:float",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "Asin": {
    "name": "arc sine",
    "alternateNames": [
      "asin",
      "arc sinus"
    ],
    "defaultNodeName": "arc sine",
    "path": [
      "math",
      "trigonometry"
    ],
    "help": "Performs an arc sine function on a value.",
    "input": {
      "value": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value"
      }
    },
    "type": "Asin",
    "output": {
      "result": {
        "type": "float",
        "displayName": "result"
      },
      "result list": {
        "type": "list:float",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "Atan": {
    "name": "arc tangent",
    "alternateNames": [
      "atan"
    ],
    "defaultNodeName": "arc tangent",
    "path": [
      "math",
      "trigonometry"
    ],
    "help": "Performs an arc tangent function on a value.",
    "input": {
      "value": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value"
      }
    },
    "type": "Atan",
    "output": {
      "result": {
        "type": "float",
        "displayName": "result"
      },
      "result list": {
        "type": "list:float",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "Atan2": {
    "name": "arc tangent 2",
    "alternateNames": [
      "atan2"
    ],
    "defaultNodeName": "arc tangent 2",
    "path": [
      "math",
      "trigonometry"
    ],
    "help": "Performs an arc tangent2 function of two values (x an y).",
    "input": {
      "x": {
        "type": "flexi:float",
        "default": 1,
        "displayName": "x"
      },
      "y": {
        "type": "flexi:float",
        "default": 1,
        "displayName": "y"
      }
    },
    "type": "Atan2",
    "output": {
      "result": {
        "type": "float",
        "displayName": "result"
      },
      "result list": {
        "type": "list:float",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "Cos": {
    "name": "cosine",
    "alternateNames": [
      "cosinus"
    ],
    "defaultNodeName": "cosine",
    "path": [
      "math",
      "trigonometry"
    ],
    "help": "Performs a cosine function on a value.",
    "input": {
      "value": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value"
      }
    },
    "type": "Cos",
    "output": {
      "result": {
        "type": "float",
        "displayName": "result"
      },
      "result list": {
        "type": "list:float",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "DegToRad": {
    "name": "degrees to radians",
    "alternateNames": [],
    "defaultNodeName": "degrees to radians",
    "path": [
      "math",
      "trigonometry"
    ],
    "help": "Converts degrees to radians.",
    "input": {
      "value": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value"
      }
    },
    "type": "DegToRad",
    "output": {
      "result": {
        "type": "float",
        "displayName": "result"
      },
      "result list": {
        "type": "list:float",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "Pi": {
    "name": "pi",
    "alternateNames": [
      "π"
    ],
    "defaultNodeName": "pi",
    "path": [
      "math",
      "trigonometry"
    ],
    "help": "Outputs the value of pi.",
    "input": {},
    "type": "Pi",
    "output": {
      "pi": {
        "type": "float",
        "description": "the value of pi",
        "displayName": "pi"
      }
    },
    "nodeClass": "value"
  },
  "RadToDeg": {
    "name": "radians to degrees",
    "alternateNames": [],
    "defaultNodeName": "radians to degrees",
    "path": [
      "math",
      "trigonometry"
    ],
    "help": "Converts radians to degrees.",
    "input": {
      "value": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value"
      }
    },
    "type": "RadToDeg",
    "output": {
      "result": {
        "type": "float",
        "displayName": "result"
      },
      "result list": {
        "type": "list:float",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "Sin": {
    "name": "sine",
    "alternateNames": [
      "sinus"
    ],
    "defaultNodeName": "sine",
    "path": [
      "math",
      "trigonometry"
    ],
    "help": "Performs a sine function on a value.",
    "input": {
      "value": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value"
      }
    },
    "type": "Sin",
    "output": {
      "result": {
        "type": "float",
        "displayName": "result"
      },
      "result list": {
        "type": "list:float",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "Tan": {
    "name": "tangent",
    "alternateNames": [
      "tan"
    ],
    "defaultNodeName": "tangent",
    "path": [
      "math",
      "trigonometry"
    ],
    "help": "Performs a tangent function on a value.",
    "input": {
      "value": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "value"
      }
    },
    "type": "Tan",
    "output": {
      "result": {
        "type": "float",
        "displayName": "result"
      },
      "result list": {
        "type": "list:float",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "AddVectors": {
    "name": "add vectors",
    "alternateNames": [
      "sum",
      "addition"
    ],
    "defaultNodeName": "add vectors",
    "path": [
      "math",
      "vector"
    ],
    "help": "Sums vectors.",
    "input": {
      "vector1": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "vector 1"
      },
      "reverse1": {
        "type": "boolean",
        "default": false,
        "displayName": "opposite vector 1"
      },
      "vector2": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "vector 2"
      },
      "reverse2": {
        "type": "boolean",
        "default": false,
        "displayName": "opposite vector 2"
      },
      "vector3": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "vector 3"
      },
      "reverse3": {
        "type": "boolean",
        "default": false,
        "displayName": "opposite vector 3"
      },
      "vector4": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "vector 4"
      },
      "reverse4": {
        "type": "boolean",
        "default": false,
        "displayName": "opposite vector 4"
      },
      "normalizeResult": {
        "type": "boolean",
        "default": false,
        "displayName": "normalize"
      },
      "reverseResult": {
        "type": "boolean",
        "default": false,
        "displayName": "reverse"
      }
    },
    "type": "AddVectors",
    "output": {
      "result": {
        "type": "vector",
        "displayName": "result"
      },
      "result list": {
        "type": "list:vector",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "AngleBetween": {
    "name": "angle between",
    "alternateNames": [
      "angle between vectors"
    ],
    "defaultNodeName": "angle between",
    "path": [
      "math",
      "vector"
    ],
    "help": "Finds the (smallest) angle between two vectors.",
    "input": {
      "vector1": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "vector 1"
      },
      "vector2": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "vector 2"
      },
      "radians": {
        "type": "boolean",
        "displayName": "output radians",
        "description": "output radians instead of degrees"
      }
    },
    "type": "AngleBetween",
    "output": {
      "result": {
        "type": "float",
        "displayName": "result",
        "defaultOutput": true
      },
      "result list": {
        "type": "list:float",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "Cross": {
    "name": "cross product",
    "alternateNames": [],
    "defaultNodeName": "cross product",
    "path": [
      "math",
      "vector"
    ],
    "help": "Performs the cross product of two vectors.",
    "input": {
      "vector1": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "vector1"
      },
      "vector2": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "vector2"
      },
      "normalizeResult": {
        "type": "boolean",
        "default": false,
        "displayName": "normalize"
      },
      "reverseResult": {
        "type": "boolean",
        "default": false,
        "displayName": "reverse"
      }
    },
    "type": "Cross",
    "output": {
      "result": {
        "type": "vector",
        "displayName": "result"
      },
      "result list": {
        "type": "list:vector",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "Dot": {
    "name": "dot product",
    "alternateNames": [],
    "defaultNodeName": "dot product",
    "path": [
      "math",
      "vector"
    ],
    "help": "Performs the dot product of two vectors.",
    "input": {
      "vector1": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "vector1"
      },
      "vector2": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "vector2"
      }
    },
    "type": "Dot",
    "output": {
      "result": {
        "type": "float",
        "displayName": "result"
      },
      "result list": {
        "type": "list:float",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "Magnitude": {
    "name": "vector magnitude",
    "alternateNames": [
      "vector length",
      "distance"
    ],
    "defaultNodeName": "vector magnitude",
    "path": [
      "math",
      "vector"
    ],
    "help": "Finds the magnitude (length/size) of a vector.",
    "input": {
      "vector": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "vector"
      },
      "squareMagnitude": {
        "type": "boolean",
        "default": false,
        "displayName": "square magnitude",
        "description": "do not take square root after squaring values (faster)"
      }
    },
    "type": "Magnitude",
    "output": {
      "result": {
        "type": "float",
        "displayName": "result"
      },
      "result list": {
        "type": "list:float",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "MultiplyVector": {
    "name": "multiply vector",
    "alternateNames": [],
    "defaultNodeName": "multiply vector",
    "path": [
      "math",
      "vector"
    ],
    "help": "Multiplies vectors by factor values and/or with other vectors.",
    "input": {
      "vector1": {
        "type": "flexi:vector",
        "default": [
          1,
          1,
          1
        ],
        "displayName": "vector1"
      },
      "vector2": {
        "type": "flexi:vector",
        "default": [
          1,
          1,
          1
        ],
        "displayName": "vector2"
      },
      "factor": {
        "type": "flexi:float",
        "default": 1,
        "displayName": "factor"
      },
      "reverseResult": {
        "type": "boolean",
        "default": false,
        "displayName": "reverse"
      }
    },
    "type": "MultiplyVector",
    "output": {
      "result": {
        "type": "vector",
        "displayName": "result"
      },
      "result list": {
        "type": "list:vector",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "Normalize": {
    "name": "normalize vector",
    "alternateNames": [],
    "defaultNodeName": "normalize vector",
    "path": [
      "math",
      "vector"
    ],
    "help": "Normalizes vectors (makes vector magnitudes == 1).",
    "input": {
      "vector": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "vector"
      },
      "reverseResult": {
        "type": "boolean",
        "default": false,
        "displayName": "reverse"
      }
    },
    "type": "Normalize",
    "output": {
      "result": {
        "type": "vector",
        "displayName": "result"
      },
      "result list": {
        "type": "list:vector",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "SubtractVectors": {
    "name": "subtract vectors",
    "alternateNames": [],
    "defaultNodeName": "subtract vectors",
    "path": [
      "math",
      "vector"
    ],
    "help": "Subtract vectors from vectors.",
    "input": {
      "vector1": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "vector1"
      },
      "vector2": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "vector2"
      },
      "normalizeResult": {
        "type": "boolean",
        "default": false,
        "displayName": "normalize"
      },
      "reverseResult": {
        "type": "boolean",
        "default": false,
        "displayName": "reverse"
      }
    },
    "type": "SubtractVectors",
    "output": {
      "result": {
        "type": "vector",
        "displayName": "result"
      },
      "result list": {
        "type": "list:vector",
        "displayName": "result list"
      }
    },
    "nodeClass": "math"
  },
  "VectorToXYZ": {
    "name": "vector to xyz",
    "alternateNames": [
      "vector to float",
      "explode",
      "vector to components",
      "decompose"
    ],
    "defaultNodeName": "vector to xyz",
    "path": [
      "math",
      "vector"
    ],
    "help": "Splits a vector into its x, y and z components.",
    "input": {
      "vector": {
        "type": "flexi:vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "vector"
      }
    },
    "type": "VectorToXYZ",
    "output": {
      "x": {
        "type": "float",
        "description": "x float",
        "displayName": "x"
      },
      "y": {
        "type": "float",
        "description": "y float",
        "displayName": "y"
      },
      "z": {
        "type": "float",
        "description": "z float",
        "displayName": "z"
      },
      "x as list": {
        "type": "list:float",
        "description": "x as list",
        "displayName": "x as list"
      },
      "y as list": {
        "type": "list:float",
        "description": "y as list",
        "displayName": "y as list"
      },
      "z as list": {
        "type": "list:float",
        "description": "z as list",
        "displayName": "z as list"
      }
    },
    "nodeClass": "math"
  },
  "XYZToVector": {
    "name": "xyz to vector",
    "alternateNames": [
      "float to vector",
      "combine",
      "assemble"
    ],
    "defaultNodeName": "xyz to vector",
    "path": [
      "math",
      "vector"
    ],
    "help": "Creates a vector from x, y and z components.",
    "input": {
      "x": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "x"
      },
      "y": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "y"
      },
      "z": {
        "type": "flexi:float",
        "default": 0,
        "displayName": "z"
      }
    },
    "type": "XYZToVector",
    "output": {
      "vector": {
        "type": "vector",
        "description": "output vector",
        "displayName": "vector"
      },
      "vector list": {
        "type": "list:vector",
        "description": "output vector list",
        "displayName": "vector list"
      }
    },
    "nodeClass": "math"
  },
  "EqualStrings": {
    "name": "equal strings",
    "alternateNames": [
      "same",
      "identical",
      "string is",
      "==",
      "compare"
    ],
    "defaultNodeName": "equal strings",
    "path": [
      "string"
    ],
    "help": "Logically compares strings.",
    "input": {
      "string1": {
        "type": "flexi:string",
        "default": "",
        "displayName": "string 1"
      },
      "string2": {
        "type": "flexi:string",
        "default": "",
        "displayName": "string 2"
      }
    },
    "type": "EqualStrings",
    "output": {
      "result": {
        "type": "boolean",
        "displayName": "result"
      },
      "result list": {
        "type": "list:boolean",
        "displayName": "result list"
      }
    },
    "nodeClass": "string"
  },
  "StringJoin": {
    "name": "join strings",
    "alternateNames": [
      "combine strings",
      "concatenate strings"
    ],
    "defaultNodeName": "join strings",
    "path": [
      "string"
    ],
    "help": "Concatenates strings.",
    "input": {
      "string1": {
        "type": "flexi:string",
        "default": "",
        "displayName": "string 1"
      },
      "string2": {
        "type": "flexi:string",
        "default": "",
        "displayName": "string 2"
      },
      "separator": {
        "type": "string",
        "default": "",
        "displayName": "separator"
      }
    },
    "type": "StringJoin",
    "output": {
      "string": {
        "type": "string",
        "displayName": "string"
      },
      "string list": {
        "type": "list:string",
        "displayName": "string list"
      }
    },
    "nodeClass": "string"
  },
  "StringSplit": {
    "name": "split string",
    "alternateNames": [],
    "defaultNodeName": "split string",
    "path": [
      "string"
    ],
    "help": "Splits string into strings.",
    "input": {
      "stringToSplit": {
        "type": "string",
        "default": "",
        "displayName": "string"
      },
      "separator": {
        "type": "string",
        "default": "",
        "displayName": "separator"
      }
    },
    "type": "StringSplit",
    "output": {
      "string list": {
        "type": "list:string",
        "displayName": "string list"
      }
    },
    "nodeClass": "string"
  },
  "Ephemeral": {
    "name": "ephemeral state",
    "alternateNames": [
      "temporary state",
      "dragging slider",
      "preview"
    ],
    "defaultNodeName": "ephemeral",
    "path": [
      "utility"
    ],
    "help": "Outputs the ephemeral state of the graph. This state is set programmatically.",
    "type": "Ephemeral",
    "input": {},
    "output": {
      "IsEphemeral": {
        "type": "boolean",
        "displayName": "is ephemeral"
      }
    }
  },
  "Error": {
    "name": "error check",
    "alternateNames": [
      "error switch"
    ],
    "defaultNodeName": "error check",
    "path": [
      "utility"
    ],
    "help": "Checks whether an input node is errored.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry",
        "multigeo": true
      },
      "input": {
        "type": "flexi:anything",
        "description": "connect any expression node",
        "displayName": "input"
      },
      "message": {
        "type": "string",
        "description": "error message to output (leave empty to use input node's error message)",
        "displayName": "message"
      }
    },
    "type": "Error",
    "output": {
      "error": {
        "type": "boolean",
        "displayName": "error"
      },
      "error message": {
        "type": "string",
        "displayName": "error message"
      }
    },
    "nodeClass": "value"
  },
  "BooleanValue": {
    "name": "boolean",
    "alternateNames": [
      "checkbox",
      "state",
      "bit",
      "binary",
      "on off",
      "parameter"
    ],
    "defaultNodeName": "boolean",
    "path": [
      "value",
      "parameter"
    ],
    "help": "Creates a boolean value.",
    "input": {
      "value": {
        "type": "boolean",
        "displayName": "value"
      },
      "defaultValue": {
        "type": "boolean",
        "displayName": "default"
      },
      "setToDefault": {
        "type": "button",
        "displayName": "set to default"
      },
      "hideControl": {
        "type": "boolean",
        "displayName": "hide control",
        "default": false
      },
      "hideLabel": {
        "type": "boolean",
        "default": false,
        "displayName": "hide label",
        "hideWhen": "hideControl"
      }
    },
    "type": "BooleanValue",
    "output": {
      "value": {
        "type": "boolean",
        "description": "output boolean",
        "displayName": "value",
        "defaultOutput": true
      }
    },
    "nodeClass": "value"
  },
  "BooleanList": {
    "name": "boolean list",
    "alternateNames": [
      "bitmask",
      "mask"
    ],
    "defaultNodeName": "boolean list",
    "path": [
      "value",
      "list"
    ],
    "help": "Creates a list of boolean values.",
    "input": {
      "list": {
        "type": "list:boolean",
        "displayName": "list"
      },
      "size": {
        "type": "integer",
        "default": 10,
        "displayName": "size"
      },
      "defaultValue": {
        "type": "boolean",
        "default": false,
        "displayName": "default"
      },
      "pattern": {
        "type": "boolean",
        "default": false,
        "displayName": "pattern"
      },
      "start": {
        "type": "integer",
        "default": 0,
        "displayName": "start",
        "hideWhen": "!pattern"
      },
      "end": {
        "type": "integer",
        "default": 10,
        "displayName": "end",
        "hideWhen": "!pattern"
      },
      "skip": {
        "type": "integer",
        "default": 1,
        "displayName": "skip",
        "hideWhen": "!pattern"
      },
      "every": {
        "type": "integer",
        "default": 3,
        "displayName": "every",
        "hideWhen": "!pattern"
      },
      "initialise": {
        "type": "boolean",
        "default": false,
        "displayName": "initialize"
      }
    },
    "type": "BooleanList",
    "output": {
      "list": {
        "type": "list:boolean",
        "description": "output list",
        "displayName": "list"
      }
    },
    "nodeClass": "value"
  },
  "ColorValue": {
    "name": "color",
    "alternateNames": [
      "parameter"
    ],
    "defaultNodeName": "color",
    "path": [
      "value",
      "parameter"
    ],
    "help": "Creates an rgb color value. The default range for the rgb components is 0 to 1.",
    "input": {
      "value": {
        "type": "color",
        "displayName": "value"
      },
      "defaultValue": {
        "type": "color",
        "displayName": "default"
      },
      "setToDefault": {
        "type": "button",
        "displayName": "set to default"
      },
      "hideControl": {
        "type": "boolean",
        "displayName": "hide control",
        "default": false
      },
      "hideLabel": {
        "type": "boolean",
        "default": false,
        "displayName": "hide label",
        "hideWhen": "hideControl"
      }
    },
    "type": "ColorValue",
    "output": {
      "value": {
        "type": "color",
        "description": "output color",
        "displayName": "value"
      }
    },
    "nodeClass": "value"
  },
  "EnumValue": {
    "name": "choice",
    "alternateNames": [
      "dropdown",
      "menu",
      "choose",
      "choice",
      "enumeration",
      "parameter"
    ],
    "defaultNodeName": "choice",
    "path": [
      "value",
      "parameter"
    ],
    "help": "Creates a enumeration (choice) parameter, typically shown as a dropdown UI element.",
    "input": {
      "value": {
        "type": "enum",
        "displayName": "value"
      },
      "options": {
        "type": "string",
        "description": "comma-separated list of choice options",
        "displayName": "options"
      },
      "indexOffset": {
        "type": "integer",
        "default": 0,
        "description": "offset output index by this value",
        "displayName": "index offset"
      },
      "defaultValue": {
        "type": "integer",
        "default": 0,
        "description": "choice option index to use when the value is reset",
        "displayName": "default index"
      },
      "setToDefault": {
        "type": "button",
        "displayName": "set to default"
      },
      "resetMode": {
        "type": "enum",
        "displayName": "reset mode",
        "options": [
          "when any input changes",
          "do not reset index"
        ],
        "default": 1
      },
      "hideControl": {
        "type": "boolean",
        "displayName": "hide control",
        "default": false
      },
      "hideLabel": {
        "type": "boolean",
        "default": false,
        "displayName": "hide label",
        "hideWhen": "hideControl"
      }
    },
    "type": "EnumValue",
    "output": {
      "value": {
        "type": "integer",
        "description": "chosen choice option index (with offset)",
        "displayName": "value",
        "defaultOutput": true
      },
      "text": {
        "type": "string",
        "description": "chosen choice option text",
        "displayName": "text"
      }
    },
    "nodeClass": "value"
  },
  "FloatValue": {
    "name": "number",
    "alternateNames": [
      "float",
      "double",
      "decimal",
      "real",
      "parameter"
    ],
    "defaultNodeName": "number",
    "path": [
      "value",
      "parameter"
    ],
    "help": "Creates a floating point number (double precision).",
    "input": {
      "value": {
        "type": "float",
        "displayName": "value"
      },
      "defaultValue": {
        "type": "float",
        "default": 0.0,
        "displayName": "default",
        "description": "Value to output when the value is set to default, or when the input value is null."
      },
      "setToDefault": {
        "type": "button",
        "displayName": "set to default"
      },
      "minMaxMode": {
        "type": "enum",
        "displayName": "min/max mode",
        "default": 1,
        "options": [
          "hard",
          "soft"
        ],
        "description": "Soft: values outside of slider range allowed.  Hard: min/max respected at all times."
      },
      "min": {
        "type": "float",
        "displayName": "min"
      },
      "max": {
        "type": "float",
        "default": 10000,
        "displayName": "max"
      },
      "step": {
        "type": "float",
        "default": 0,
        "displayName": "step"
      },
      "hideControl": {
        "type": "boolean",
        "displayName": "hide control",
        "default": false
      },
      "hideLabel": {
        "type": "boolean",
        "default": false,
        "displayName": "hide label",
        "hideWhen": "hideControl"
      },
      "hideInputField": {
        "type": "boolean",
        "default": false,
        "displayName": "hide input field",
        "hideWhen": "hideControl"
      },
      "hideSlider": {
        "type": "boolean",
        "default": false,
        "displayName": "hide slider",
        "hideWhen": "hideControl"
      }
    },
    "type": "FloatValue",
    "output": {
      "value": {
        "type": "float",
        "description": "output float",
        "displayName": "value",
        "defaultOutput": true
      },
      "inputIsNull": {
        "type": "boolean",
        "description": "Is true when the node's input is set to null.",
        "displayName": "input is null"
      }
    },
    "nodeClass": "value"
  },
  "FloatList": {
    "name": "number list",
    "alternateNames": [
      "float",
      "decimal"
    ],
    "defaultNodeName": "number list",
    "path": [
      "value",
      "list"
    ],
    "help": "Creates a list of (double precision) floating point number values.",
    "input": {
      "list": {
        "type": "list:float",
        "displayName": "list"
      },
      "size": {
        "type": "integer",
        "default": 10,
        "displayName": "size"
      },
      "defaultValue": {
        "type": "float",
        "default": 0,
        "displayName": "default"
      },
      "initialise": {
        "type": "boolean",
        "default": false,
        "displayName": "initialize"
      }
    },
    "type": "FloatList",
    "output": {
      "list": {
        "type": "list:float",
        "description": "Output list",
        "displayName": "list"
      }
    },
    "nodeClass": "value"
  },
  "IntegerValue": {
    "name": "integer",
    "alternateNames": [
      "whole",
      "number",
      "parameter"
    ],
    "defaultNodeName": "number",
    "path": [
      "value",
      "parameter"
    ],
    "help": "Creates an integer number value.",
    "input": {
      "value": {
        "type": "integer",
        "default": 0,
        "displayName": "value"
      },
      "defaultValue": {
        "type": "integer",
        "default": 0,
        "displayName": "default",
        "description": "Value to output when the value is set to default, or when the input value is null."
      },
      "setToDefault": {
        "type": "button",
        "displayName": "set to default"
      },
      "minMaxMode": {
        "type": "enum",
        "displayName": "min/max mode",
        "default": 1,
        "options": [
          "hard",
          "soft"
        ],
        "description": "Soft: values outside of slider range allowed.  Hard: min/max respected at all times."
      },
      "min": {
        "type": "integer",
        "default": 0,
        "displayName": "min"
      },
      "max": {
        "type": "integer",
        "default": 100,
        "displayName": "max"
      },
      "hideControl": {
        "type": "boolean",
        "displayName": "hide control",
        "default": false
      },
      "hideLabel": {
        "type": "boolean",
        "default": false,
        "displayName": "hide label",
        "hideWhen": "hideControl"
      },
      "hideInputField": {
        "type": "boolean",
        "default": false,
        "displayName": "hide input field",
        "hideWhen": "hideControl"
      },
      "hideSlider": {
        "type": "boolean",
        "default": false,
        "displayName": "hide slider",
        "hideWhen": "hideControl"
      }
    },
    "type": "IntegerValue",
    "output": {
      "value": {
        "type": "integer",
        "description": "output integer",
        "displayName": "value",
        "defaultOutput": true
      },
      "inputIsNull": {
        "type": "boolean",
        "description": "Is true when the node's input is set to null.",
        "displayName": "input is null"
      }
    },
    "nodeClass": "value"
  },
  "IntegerList": {
    "name": "integer list",
    "alternateNames": [
      "number"
    ],
    "defaultNodeName": "number list",
    "path": [
      "value",
      "list"
    ],
    "help": "Creates a list of integer number values.",
    "input": {
      "list": {
        "type": "list:integer",
        "displayName": "list"
      },
      "size": {
        "type": "integer",
        "default": 10,
        "displayName": "size"
      },
      "iterator": {
        "type": "boolean",
        "default": false,
        "displayName": "iterator"
      },
      "defaultValue": {
        "type": "integer",
        "default": 0,
        "displayName": "default",
        "hideWhen": "iterator"
      },
      "initialise": {
        "type": "boolean",
        "default": false,
        "displayName": "initialize"
      }
    },
    "type": "IntegerList",
    "output": {
      "list": {
        "type": "list:integer",
        "description": "output list",
        "displayName": "list"
      }
    },
    "nodeClass": "value"
  },
  "StringValue": {
    "name": "string",
    "alternateNames": [
      "parameter",
      "text",
      "word"
    ],
    "defaultNodeName": "string",
    "path": [
      "value",
      "parameter"
    ],
    "help": "Creates a string (text) value.",
    "input": {
      "value": {
        "type": "string",
        "displayName": "value"
      },
      "defaultValue": {
        "type": "string",
        "displayName": "default"
      },
      "setToDefault": {
        "type": "button",
        "displayName": "set to default"
      },
      "hideControl": {
        "type": "boolean",
        "displayName": "hide control",
        "default": false
      },
      "hideLabel": {
        "type": "boolean",
        "default": false,
        "displayName": "hide label",
        "hideWhen": "hideControl"
      }
    },
    "type": "StringValue",
    "output": {
      "value": {
        "type": "string",
        "description": "output string",
        "displayName": "value",
        "defaultOutput": true
      }
    },
    "nodeClass": "value"
  },
  "StringList": {
    "name": "string list",
    "alternateNames": [
      "text"
    ],
    "defaultNodeName": "string list",
    "path": [
      "value",
      "list"
    ],
    "help": "Creates a list of string (text) values.",
    "input": {
      "list": {
        "type": "list:string",
        "displayName": "list"
      },
      "size": {
        "type": "integer",
        "default": 10,
        "displayName": "size"
      },
      "defaultValue": {
        "type": "string",
        "default": "",
        "displayName": "default"
      },
      "initialise": {
        "type": "boolean",
        "default": false,
        "displayName": "initialize"
      }
    },
    "type": "StringList",
    "output": {
      "list": {
        "type": "list:string",
        "description": "output list of strings",
        "displayName": "list"
      }
    },
    "nodeClass": "value"
  },
  "VectorValue": {
    "name": "vector",
    "alternateNames": [
      "point",
      "coordinate",
      "direction",
      "xyz"
    ],
    "defaultNodeName": "vector",
    "path": [
      "value",
      "parameter"
    ],
    "help": "Creates a 3 component xyz vector value.",
    "input": {
      "value": {
        "type": "vector",
        "displayName": "value"
      },
      "defaultValue": {
        "type": "vector",
        "displayName": "default"
      },
      "setToDefault": {
        "type": "button",
        "displayName": "set to default"
      },
      "hideControl": {
        "type": "boolean",
        "displayName": "hide control",
        "default": false
      },
      "hideLabel": {
        "type": "boolean",
        "default": false,
        "displayName": "hide label",
        "hideWhen": "hideControl"
      }
    },
    "type": "VectorValue",
    "output": {
      "value": {
        "type": "vector",
        "description": "vector output",
        "displayName": "value",
        "defaultOutput": true
      },
      "x": {
        "type": "float",
        "description": "vector x component",
        "displayName": "x"
      },
      "y": {
        "type": "float",
        "description": "vector y component",
        "displayName": "y"
      },
      "z": {
        "type": "float",
        "description": "vector z component",
        "displayName": "z"
      }
    },
    "nodeClass": "value"
  },
  "VectorList": {
    "name": "vector list",
    "alternateNames": [
      "points",
      "coordinates",
      "directions",
      "xyz"
    ],
    "defaultNodeName": "vector list",
    "path": [
      "value",
      "list"
    ],
    "help": "Creates a list of 3 component xyz vector values.",
    "input": {
      "list": {
        "type": "list:vector",
        "displayName": "list"
      },
      "size": {
        "type": "integer",
        "default": 10,
        "displayName": "size"
      },
      "defaultValue": {
        "type": "vector",
        "default": [
          0,
          0,
          0
        ],
        "displayName": "default"
      },
      "initialise": {
        "type": "boolean",
        "default": false,
        "displayName": "initialize"
      }
    },
    "type": "VectorList",
    "output": {
      "list": {
        "type": "list:vector",
        "description": "output list",
        "displayName": "list"
      }
    },
    "nodeClass": "value"
  },
  "CombineData": {
    "name": "combine data",
    "defaultNodeName": "combine data",
    "type": "CombineData",
    "alternateNames": [],
    "path": [
      "utility"
    ],
    "help": "Combine incoming data into a list of data.",
    "input": {
      "input1": {
        "type": "flexi:anything",
        "displayName": "input 1",
        "description": "Can be any type of data input.  Will be ignored if not connected.",
        "default": null
      },
      "input2": {
        "type": "flexi:anything",
        "displayName": "input 2",
        "description": "Can be any type of data input.  Will be ignored if not connected.",
        "default": null
      },
      "input3": {
        "type": "flexi:anything",
        "displayName": "input 3",
        "description": "Can be any type of data input.  Will be ignored if not connected.",
        "default": null
      },
      "input4": {
        "type": "flexi:anything",
        "displayName": "input 4",
        "description": "Can be any type of data input.  Will be ignored if not connected.",
        "default": null
      },
      "input5": {
        "type": "flexi:anything",
        "displayName": "input 5",
        "description": "Can be any type of data input.  Will be ignored if not connected.",
        "default": null
      },
      "input6": {
        "type": "flexi:anything",
        "displayName": "input 6",
        "description": "Can be any type of data input.  Will be ignored if not connected.",
        "default": null
      },
      "input7": {
        "type": "flexi:anything",
        "displayName": "input 7",
        "description": "Can be any type of data input.  Will be ignored if not connected.",
        "default": null
      },
      "input8": {
        "type": "flexi:anything",
        "displayName": "input 8",
        "description": "Can be any type of data input.  Will be ignored if not connected.",
        "default": null
      },
      "mode": {
        "type": "enum",
        "displayName": "expand mode",
        "description": "Preserve: keep list nesting.\nExpand: unpack lists (one level).\nExpand recursively: unpack lists recursively into a single unnested list.",
        "default": 0,
        "options": [
          "preserve lists",
          "expand lists",
          "expand lists recursively"
        ]
      }
    },
    "output": {
      "data": {
        "displayName": "data list",
        "type": "flexi:anything",
        "description": "list of data"
      }
    }
  },
  "JsonBuilder": {
    "name": "JSON builder",
    "defaultNodeName": "JSON builder",
    "type": "JsonBuilder",
    "alternateNames": [],
    "help": "Creates an array or a dictionary, and serializes it to JSON.",
    "path": [
      "utility"
    ],
    "input": {
      "mode": {
        "type": "enum",
        "displayName": "mode",
        "options": [
          "array",
          "dictionary"
        ]
      },
      "keys": {
        "type": "flexi:string",
        "displayName": "keys",
        "description": "List of dictionary keys. List length must be the same as the values list.",
        "default": null
      },
      "values": {
        "type": "flexi:anything",
        "displayName": "values",
        "description": "List of values. In dictionary mode, its length must be the same as the keys list.",
        "default": null
      }
    },
    "output": {
      "json": {
        "type": "string",
        "displayName": "JSON",
        "description": "the array, or dictionary, as a JSON string"
      }
    }
  },
  "MeshBoolean": {
    "name": "boolean 3d geometry",
    "alternateNames": [
      "3d boolean",
      "CSG"
    ],
    "defaultNodeName": "3d boolean",
    "path": [
      "geometry",
      "modify"
    ],
    "help": "Performs boolean operations on 3d geometry.",
    "input": {
      "geometry": {
        "type": "geometry",
        "description": "input geometry",
        "displayName": "geometry",
        "multigeo": true
      },
      "mode": {
        "type": "enum",
        "options": [
          "union",
          "subtraction",
          "reverse subtraction",
          "intersection",
          "XOR"
        ],
        "displayName": "boolean type"
      },
      "weld": {
        "type": "boolean",
        "default": true,
        "displayName": "weld",
        "description": "Pre-weld incoming geometries"
      }
    },
    "type": "MeshBoolean",
    "output": {
      "geometry": {
        "type": "geometry",
        "description": "output geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "description": "point positions",
        "displayName": "points"
      },
      "points.x": {
        "type": "list:float",
        "description": "point positions x coordinate",
        "displayName": "points.x"
      },
      "points.y": {
        "type": "list:float",
        "description": "point positions y coordinate",
        "displayName": "points.y"
      },
      "points.z": {
        "type": "list:float",
        "description": "point positions z coordinate",
        "displayName": "points.z"
      }
    }
  }
}