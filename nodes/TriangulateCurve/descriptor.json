{
    "name": "triangulate 2d path",
    "alternateNames": [
      "create polygon",
      "tesselate",
      "tessellate",
      "path",
      "curve",
      "mesh",
      "path to polygon"
    ],
    "defaultNodeName": "triangulate 2d path",
    "path": [
      "geometry",
      "2d path"
    ],
    "help": "Converts 2D curves into a triangulated mesh in a chosen work plane.",
    "input": {
      "geometry": {
        "type": "geometry",
        "displayName": "geometry"
      },
      "workplane": {
        "type": "enum",
        "displayName": "work plane",
        "default": 2,
        "options": [
          "X = 0",
          "Y = 0",
          "Z = 0"
        ]
      },
      "preFlatten": {
        "type": "boolean",
        "displayName": "pre-flatten",
        "default": true,
        "description": "Flattens the input curves into the chosen work plane before triangulation."
      },
      "library": {
        "type": "enum",
        "displayName": "library",
        "options": [
          "Poly2Tri",
          "Triangle"
        ],
        "description": "Defines what triangulation library to use."
      },
      "mode": {
        "type": "enum",
        "displayName": "input handling",
        "options": [
          "first curve is outline, other curves are holes",
          "all curves are outlines"
        ]
      },
      "convexHull": {
        "type": "boolean",
        "displayName": "make convex hull"
      },
      "algorithm": {
        "type": "enum",
        "displayName": "algorithm",
        "options": [
          "sweepline",
          "Dwyer",
          "incremental"
        ],
        "hideWhen": "library == 0",
        "description": "Defines what algorithm to use for configured triangulation."
      },
      "refine": {
        "type": "boolean",
        "displayName": "refine",
        "default": false,
        "hideWhen": "library == 0",
        "description": "Choose to refine the mesh based on max. triangle area and angle range."
      },
      "maxArea": {
        "type": "float",
        "displayName": "max area",
        "default": 10000,
        "hideWhen": "!refine || library == 0",
        "description": "Define the max. triangle area."
      },
      "minAngle": {
        "type": "float",
        "displayName": "min angle",
        "minimum": 1,
        "maximum": 34.8,
        "default": 20,
        "hideWhen": "!refine || library == 0",
        "description": "Defines the min. angle of triangles."
      },
      "maxAngle": {
        "type": "float",
        "displayName": "max angle",
        "minimum": 100,
        "maximum": 180,
        "default": 180,
        "hideWhen": "!refine || library == 0",
        "description": "Defines the max. angle of triangles"
      },
      "smoothing": {
        "type": "integer",
        "displayName": "smoothing",
        "default": 0,
        "minimum": 0,
        "maximum": 100,
        "hideWhen": "!refine || library == 0",
        "description": "Smooth the triangle layout after triangulation. Works best when the algorithm input is set to sweepline."
      },
      "internalPoints": {
        "type": "list:vector",
        "displayName": "inner points",
        "description": "Add extra internal points, will force vertex creation at these points."
      }
    },
    "type": "TriangulateCurve",
    "output": {
      "geometry": {
        "type": "geometry",
        "displayName": "geometry"
      },
      "points": {
        "type": "list:vector",
        "displayName": "points",
        "description": "point positions."
      },
      "points.x": {
        "type": "list:float",
        "displayName": "points.x",
        "description": "point x values."
      },
      "points.y": {
        "type": "list:float",
        "displayName": "points.y",
        "description": "point y values."
      },
      "points.z": {
        "type": "list:float",
        "displayName": "points.z",
        "description": "point z values."
      }
    },
    "nodeClass": "node"
  }